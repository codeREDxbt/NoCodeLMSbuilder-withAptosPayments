"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/http-cache-semantics";
exports.ids = ["vendor-chunks/http-cache-semantics"];
exports.modules = {

/***/ "(ssr)/./node_modules/http-cache-semantics/index.js":
/*!****************************************************!*\
  !*** ./node_modules/http-cache-semantics/index.js ***!
  \****************************************************/
/***/ ((module) => {

eval("\n/**\n * @typedef {Object} HttpRequest\n * @property {Record<string, string>} headers - Request headers\n * @property {string} [method] - HTTP method\n * @property {string} [url] - Request URL\n */ /**\n * @typedef {Object} HttpResponse\n * @property {Record<string, string>} headers - Response headers\n * @property {number} [status] - HTTP status code\n */ /**\n * Set of default cacheable status codes per RFC 7231 section 6.1.\n * @type {Set<number>}\n */ const statusCodeCacheableByDefault = new Set([\n    200,\n    203,\n    204,\n    206,\n    300,\n    301,\n    308,\n    404,\n    405,\n    410,\n    414,\n    501\n]);\n/**\n * Set of HTTP status codes that the cache implementation understands.\n * Note: This implementation does not understand partial responses (206).\n * @type {Set<number>}\n */ const understoodStatuses = new Set([\n    200,\n    203,\n    204,\n    300,\n    301,\n    302,\n    303,\n    307,\n    308,\n    404,\n    405,\n    410,\n    414,\n    501\n]);\n/**\n * Set of HTTP error status codes.\n * @type {Set<number>}\n */ const errorStatusCodes = new Set([\n    500,\n    502,\n    503,\n    504\n]);\n/**\n * Object representing hop-by-hop headers that should be removed.\n * @type {Record<string, boolean>}\n */ const hopByHopHeaders = {\n    date: true,\n    connection: true,\n    \"keep-alive\": true,\n    \"proxy-authenticate\": true,\n    \"proxy-authorization\": true,\n    te: true,\n    trailer: true,\n    \"transfer-encoding\": true,\n    upgrade: true\n};\n/**\n * Headers that are excluded from revalidation update.\n * @type {Record<string, boolean>}\n */ const excludedFromRevalidationUpdate = {\n    // Since the old body is reused, it doesn't make sense to change properties of the body\n    \"content-length\": true,\n    \"content-encoding\": true,\n    \"transfer-encoding\": true,\n    \"content-range\": true\n};\n/**\n * Converts a string to a number or returns zero if the conversion fails.\n * @param {string} s - The string to convert.\n * @returns {number} The parsed number or 0.\n */ function toNumberOrZero(s) {\n    const n = parseInt(s, 10);\n    return isFinite(n) ? n : 0;\n}\n/**\n * Determines if the given response is an error response.\n * Implements RFC 5861 behavior.\n * @param {HttpResponse|undefined} response - The HTTP response object.\n * @returns {boolean} true if the response is an error or undefined, false otherwise.\n */ function isErrorResponse(response) {\n    // consider undefined response as faulty\n    if (!response) {\n        return true;\n    }\n    return errorStatusCodes.has(response.status);\n}\n/**\n * Parses a Cache-Control header string into an object.\n * @param {string} [header] - The Cache-Control header value.\n * @returns {Record<string, string|boolean>} An object representing Cache-Control directives.\n */ function parseCacheControl(header) {\n    /** @type {Record<string, string|boolean>} */ const cc = {};\n    if (!header) return cc;\n    // TODO: When there is more than one value present for a given directive (e.g., two Expires header fields, multiple Cache-Control: max-age directives),\n    // the directive's value is considered invalid. Caches are encouraged to consider responses that have invalid freshness information to be stale\n    const parts = header.trim().split(/,/);\n    for (const part of parts){\n        const [k, v] = part.split(/=/, 2);\n        cc[k.trim()] = v === undefined ? true : v.trim().replace(/^\"|\"$/g, \"\");\n    }\n    return cc;\n}\n/**\n * Formats a Cache-Control directives object into a header string.\n * @param {Record<string, string|boolean>} cc - The Cache-Control directives.\n * @returns {string|undefined} A formatted Cache-Control header string or undefined if empty.\n */ function formatCacheControl(cc) {\n    let parts = [];\n    for(const k in cc){\n        const v = cc[k];\n        parts.push(v === true ? k : k + \"=\" + v);\n    }\n    if (!parts.length) {\n        return undefined;\n    }\n    return parts.join(\", \");\n}\nmodule.exports = class CachePolicy {\n    /**\n     * Creates a new CachePolicy instance.\n     * @param {HttpRequest} req - Incoming client request.\n     * @param {HttpResponse} res - Received server response.\n     * @param {Object} [options={}] - Configuration options.\n     * @param {boolean} [options.shared=true] - Is the cache shared (a public proxy)? `false` for personal browser caches.\n     * @param {number} [options.cacheHeuristic=0.1] - Fallback heuristic (age fraction) for cache duration.\n     * @param {number} [options.immutableMinTimeToLive=86400000] - Minimum TTL for immutable responses in milliseconds.\n     * @param {boolean} [options.ignoreCargoCult=false] - Detect nonsense cache headers, and override them.\n     * @param {any} [options._fromObject] - Internal parameter for deserialization. Do not use.\n     */ constructor(req, res, { shared, cacheHeuristic, immutableMinTimeToLive, ignoreCargoCult, _fromObject } = {}){\n        if (_fromObject) {\n            this._fromObject(_fromObject);\n            return;\n        }\n        if (!res || !res.headers) {\n            throw Error(\"Response headers missing\");\n        }\n        this._assertRequestHasHeaders(req);\n        /** @type {number} Timestamp when the response was received */ this._responseTime = this.now();\n        /** @type {boolean} Indicates if the cache is shared */ this._isShared = shared !== false;\n        /** @type {boolean} Indicates if legacy cargo cult directives should be ignored */ this._ignoreCargoCult = !!ignoreCargoCult;\n        /** @type {number} Heuristic cache fraction */ this._cacheHeuristic = undefined !== cacheHeuristic ? cacheHeuristic : 0.1; // 10% matches IE\n        /** @type {number} Minimum TTL for immutable responses in ms */ this._immutableMinTtl = undefined !== immutableMinTimeToLive ? immutableMinTimeToLive : 24 * 3600 * 1000;\n        /** @type {number} HTTP status code */ this._status = \"status\" in res ? res.status : 200;\n        /** @type {Record<string, string>} Response headers */ this._resHeaders = res.headers;\n        /** @type {Record<string, string|boolean>} Parsed Cache-Control directives from response */ this._rescc = parseCacheControl(res.headers[\"cache-control\"]);\n        /** @type {string} HTTP method (e.g., GET, POST) */ this._method = \"method\" in req ? req.method : \"GET\";\n        /** @type {string} Request URL */ this._url = req.url;\n        /** @type {string} Host header from the request */ this._host = req.headers.host;\n        /** @type {boolean} Whether the request does not include an Authorization header */ this._noAuthorization = !req.headers.authorization;\n        /** @type {Record<string, string>|null} Request headers used for Vary matching */ this._reqHeaders = res.headers.vary ? req.headers : null; // Don't keep all request headers if they won't be used\n        /** @type {Record<string, string|boolean>} Parsed Cache-Control directives from request */ this._reqcc = parseCacheControl(req.headers[\"cache-control\"]);\n        // Assume that if someone uses legacy, non-standard uncecessary options they don't understand caching,\n        // so there's no point stricly adhering to the blindly copy&pasted directives.\n        if (this._ignoreCargoCult && \"pre-check\" in this._rescc && \"post-check\" in this._rescc) {\n            delete this._rescc[\"pre-check\"];\n            delete this._rescc[\"post-check\"];\n            delete this._rescc[\"no-cache\"];\n            delete this._rescc[\"no-store\"];\n            delete this._rescc[\"must-revalidate\"];\n            this._resHeaders = Object.assign({}, this._resHeaders, {\n                \"cache-control\": formatCacheControl(this._rescc)\n            });\n            delete this._resHeaders.expires;\n            delete this._resHeaders.pragma;\n        }\n        // When the Cache-Control header field is not present in a request, caches MUST consider the no-cache request pragma-directive\n        // as having the same effect as if \"Cache-Control: no-cache\" were present (see Section 5.2.1).\n        if (res.headers[\"cache-control\"] == null && /no-cache/.test(res.headers.pragma)) {\n            this._rescc[\"no-cache\"] = true;\n        }\n    }\n    /**\n     * You can monkey-patch it for testing.\n     * @returns {number} Current time in milliseconds.\n     */ now() {\n        return Date.now();\n    }\n    /**\n     * Determines if the response is storable in a cache.\n     * @returns {boolean} `false` if can never be cached.\n     */ storable() {\n        // The \"no-store\" request directive indicates that a cache MUST NOT store any part of either this request or any response to it.\n        return !!(!this._reqcc[\"no-store\"] && // A cache MUST NOT store a response to any request, unless:\n        // The request method is understood by the cache and defined as being cacheable, and\n        (\"GET\" === this._method || \"HEAD\" === this._method || \"POST\" === this._method && this._hasExplicitExpiration()) && // the response status code is understood by the cache, and\n        understoodStatuses.has(this._status) && // the \"no-store\" cache directive does not appear in request or response header fields, and\n        !this._rescc[\"no-store\"] && // the \"private\" response directive does not appear in the response, if the cache is shared, and\n        (!this._isShared || !this._rescc.private) && // the Authorization header field does not appear in the request, if the cache is shared,\n        (!this._isShared || this._noAuthorization || this._allowsStoringAuthenticated()) && // the response either:\n        // contains an Expires header field, or\n        (this._resHeaders.expires || // contains a max-age response directive, or\n        // contains a s-maxage response directive and the cache is shared, or\n        // contains a public response directive.\n        this._rescc[\"max-age\"] || this._isShared && this._rescc[\"s-maxage\"] || this._rescc.public || // has a status code that is defined as cacheable by default\n        statusCodeCacheableByDefault.has(this._status)));\n    }\n    /**\n     * @returns {boolean} true if expiration is explicitly defined.\n     */ _hasExplicitExpiration() {\n        // 4.2.1 Calculating Freshness Lifetime\n        return !!(this._isShared && this._rescc[\"s-maxage\"] || this._rescc[\"max-age\"] || this._resHeaders.expires);\n    }\n    /**\n     * @param {HttpRequest} req - a request\n     * @throws {Error} if the headers are missing.\n     */ _assertRequestHasHeaders(req) {\n        if (!req || !req.headers) {\n            throw Error(\"Request headers missing\");\n        }\n    }\n    /**\n     * Checks if the request matches the cache and can be satisfied from the cache immediately,\n     * without having to make a request to the server.\n     *\n     * This doesn't support `stale-while-revalidate`. See `evaluateRequest()` for a more complete solution.\n     *\n     * @param {HttpRequest} req - The new incoming HTTP request.\n     * @returns {boolean} `true`` if the cached response used to construct this cache policy satisfies the request without revalidation.\n     */ satisfiesWithoutRevalidation(req) {\n        const result = this.evaluateRequest(req);\n        return !result.revalidation;\n    }\n    /**\n     * @param {{headers: Record<string, string>, synchronous: boolean}|undefined} revalidation - Revalidation information, if any.\n     * @returns {{response: {headers: Record<string, string>}, revalidation: {headers: Record<string, string>, synchronous: boolean}|undefined}} An object with a cached response headers and revalidation info.\n     */ _evaluateRequestHitResult(revalidation) {\n        return {\n            response: {\n                headers: this.responseHeaders()\n            },\n            revalidation\n        };\n    }\n    /**\n     * @param {HttpRequest} request - new incoming\n     * @param {boolean} synchronous - whether revalidation must be synchronous (not s-w-r).\n     * @returns {{headers: Record<string, string>, synchronous: boolean}} An object with revalidation headers and a synchronous flag.\n     */ _evaluateRequestRevalidation(request, synchronous) {\n        return {\n            synchronous,\n            headers: this.revalidationHeaders(request)\n        };\n    }\n    /**\n     * @param {HttpRequest} request - new incoming\n     * @returns {{response: undefined, revalidation: {headers: Record<string, string>, synchronous: boolean}}} An object indicating no cached response and revalidation details.\n     */ _evaluateRequestMissResult(request) {\n        return {\n            response: undefined,\n            revalidation: this._evaluateRequestRevalidation(request, true)\n        };\n    }\n    /**\n     * Checks if the given request matches this cache entry, and how the cache can be used to satisfy it. Returns an object with:\n     *\n     * ```\n     * {\n     *     // If defined, you must send a request to the server.\n     *     revalidation: {\n     *         headers: {}, // HTTP headers to use when sending the revalidation response\n     *         // If true, you MUST wait for a response from the server before using the cache\n     *         // If false, this is stale-while-revalidate. The cache is stale, but you can use it while you update it asynchronously.\n     *         synchronous: bool,\n     *     },\n     *     // If defined, you can use this cached response.\n     *     response: {\n     *         headers: {}, // Updated cached HTTP headers you must use when responding to the client\n     *     },\n     * }\n     * ```\n     * @param {HttpRequest} req - new incoming HTTP request\n     * @returns {{response: {headers: Record<string, string>}|undefined, revalidation: {headers: Record<string, string>, synchronous: boolean}|undefined}} An object containing keys:\n     *   - revalidation: { headers: Record<string, string>, synchronous: boolean } Set if you should send this to the origin server\n     *   - response: { headers: Record<string, string> } Set if you can respond to the client with these cached headers\n     */ evaluateRequest(req) {\n        this._assertRequestHasHeaders(req);\n        // In all circumstances, a cache MUST NOT ignore the must-revalidate directive\n        if (this._rescc[\"must-revalidate\"]) {\n            return this._evaluateRequestMissResult(req);\n        }\n        if (!this._requestMatches(req, false)) {\n            return this._evaluateRequestMissResult(req);\n        }\n        // When presented with a request, a cache MUST NOT reuse a stored response, unless:\n        // the presented request does not contain the no-cache pragma (Section 5.4), nor the no-cache cache directive,\n        // unless the stored response is successfully validated (Section 4.3), and\n        const requestCC = parseCacheControl(req.headers[\"cache-control\"]);\n        if (requestCC[\"no-cache\"] || /no-cache/.test(req.headers.pragma)) {\n            return this._evaluateRequestMissResult(req);\n        }\n        if (requestCC[\"max-age\"] && this.age() > toNumberOrZero(requestCC[\"max-age\"])) {\n            return this._evaluateRequestMissResult(req);\n        }\n        if (requestCC[\"min-fresh\"] && this.maxAge() - this.age() < toNumberOrZero(requestCC[\"min-fresh\"])) {\n            return this._evaluateRequestMissResult(req);\n        }\n        // the stored response is either:\n        // fresh, or allowed to be served stale\n        if (this.stale()) {\n            // If a value is present, then the client is willing to accept a response that has\n            // exceeded its freshness lifetime by no more than the specified number of seconds\n            const allowsStaleWithoutRevalidation = \"max-stale\" in requestCC && (true === requestCC[\"max-stale\"] || requestCC[\"max-stale\"] > this.age() - this.maxAge());\n            if (allowsStaleWithoutRevalidation) {\n                return this._evaluateRequestHitResult(undefined);\n            }\n            if (this.useStaleWhileRevalidate()) {\n                return this._evaluateRequestHitResult(this._evaluateRequestRevalidation(req, false));\n            }\n            return this._evaluateRequestMissResult(req);\n        }\n        return this._evaluateRequestHitResult(undefined);\n    }\n    /**\n     * @param {HttpRequest} req - check if this is for the same cache entry\n     * @param {boolean} allowHeadMethod - allow a HEAD method to match.\n     * @returns {boolean} `true` if the request matches.\n     */ _requestMatches(req, allowHeadMethod) {\n        // The presented effective request URI and that of the stored response match, and\n        return !!((!this._url || this._url === req.url) && this._host === req.headers.host && // the request method associated with the stored response allows it to be used for the presented request, and\n        (!req.method || this._method === req.method || allowHeadMethod && \"HEAD\" === req.method) && // selecting header fields nominated by the stored response (if any) match those presented, and\n        this._varyMatches(req));\n    }\n    /**\n     * Determines whether storing authenticated responses is allowed.\n     * @returns {boolean} `true` if allowed.\n     */ _allowsStoringAuthenticated() {\n        // following Cache-Control response directives (Section 5.2.2) have such an effect: must-revalidate, public, and s-maxage.\n        return !!(this._rescc[\"must-revalidate\"] || this._rescc.public || this._rescc[\"s-maxage\"]);\n    }\n    /**\n     * Checks whether the Vary header in the response matches the new request.\n     * @param {HttpRequest} req - incoming HTTP request\n     * @returns {boolean} `true` if the vary headers match.\n     */ _varyMatches(req) {\n        if (!this._resHeaders.vary) {\n            return true;\n        }\n        // A Vary header field-value of \"*\" always fails to match\n        if (this._resHeaders.vary === \"*\") {\n            return false;\n        }\n        const fields = this._resHeaders.vary.trim().toLowerCase().split(/\\s*,\\s*/);\n        for (const name of fields){\n            if (req.headers[name] !== this._reqHeaders[name]) return false;\n        }\n        return true;\n    }\n    /**\n     * Creates a copy of the given headers without any hop-by-hop headers.\n     * @param {Record<string, string>} inHeaders - old headers from the cached response\n     * @returns {Record<string, string>} A new headers object without hop-by-hop headers.\n     */ _copyWithoutHopByHopHeaders(inHeaders) {\n        /** @type {Record<string, string>} */ const headers = {};\n        for(const name in inHeaders){\n            if (hopByHopHeaders[name]) continue;\n            headers[name] = inHeaders[name];\n        }\n        // 9.1.  Connection\n        if (inHeaders.connection) {\n            const tokens = inHeaders.connection.trim().split(/\\s*,\\s*/);\n            for (const name of tokens){\n                delete headers[name];\n            }\n        }\n        if (headers.warning) {\n            const warnings = headers.warning.split(/,/).filter((warning)=>{\n                return !/^\\s*1[0-9][0-9]/.test(warning);\n            });\n            if (!warnings.length) {\n                delete headers.warning;\n            } else {\n                headers.warning = warnings.join(\",\").trim();\n            }\n        }\n        return headers;\n    }\n    /**\n     * Returns the response headers adjusted for serving the cached response.\n     * Removes hop-by-hop headers and updates the Age and Date headers.\n     * @returns {Record<string, string>} The adjusted response headers.\n     */ responseHeaders() {\n        const headers = this._copyWithoutHopByHopHeaders(this._resHeaders);\n        const age = this.age();\n        // A cache SHOULD generate 113 warning if it heuristically chose a freshness\n        // lifetime greater than 24 hours and the response's age is greater than 24 hours.\n        if (age > 3600 * 24 && !this._hasExplicitExpiration() && this.maxAge() > 3600 * 24) {\n            headers.warning = (headers.warning ? `${headers.warning}, ` : \"\") + '113 - \"rfc7234 5.5.4\"';\n        }\n        headers.age = `${Math.round(age)}`;\n        headers.date = new Date(this.now()).toUTCString();\n        return headers;\n    }\n    /**\n     * Returns the Date header value from the response or the current time if invalid.\n     * @returns {number} Timestamp (in milliseconds) representing the Date header or response time.\n     */ date() {\n        const serverDate = Date.parse(this._resHeaders.date);\n        if (isFinite(serverDate)) {\n            return serverDate;\n        }\n        return this._responseTime;\n    }\n    /**\n     * Value of the Age header, in seconds, updated for the current time.\n     * May be fractional.\n     * @returns {number} The age in seconds.\n     */ age() {\n        let age = this._ageValue();\n        const residentTime = (this.now() - this._responseTime) / 1000;\n        return age + residentTime;\n    }\n    /**\n     * @returns {number} The Age header value as a number.\n     */ _ageValue() {\n        return toNumberOrZero(this._resHeaders.age);\n    }\n    /**\n     * Possibly outdated value of applicable max-age (or heuristic equivalent) in seconds.\n     * This counts since response's `Date`.\n     *\n     * For an up-to-date value, see `timeToLive()`.\n     *\n     * Returns the maximum age (freshness lifetime) of the response in seconds.\n     * @returns {number} The max-age value in seconds.\n     */ maxAge() {\n        if (!this.storable() || this._rescc[\"no-cache\"]) {\n            return 0;\n        }\n        // Shared responses with cookies are cacheable according to the RFC, but IMHO it'd be unwise to do so by default\n        // so this implementation requires explicit opt-in via public header\n        if (this._isShared && this._resHeaders[\"set-cookie\"] && !this._rescc.public && !this._rescc.immutable) {\n            return 0;\n        }\n        if (this._resHeaders.vary === \"*\") {\n            return 0;\n        }\n        if (this._isShared) {\n            if (this._rescc[\"proxy-revalidate\"]) {\n                return 0;\n            }\n            // if a response includes the s-maxage directive, a shared cache recipient MUST ignore the Expires field.\n            if (this._rescc[\"s-maxage\"]) {\n                return toNumberOrZero(this._rescc[\"s-maxage\"]);\n            }\n        }\n        // If a response includes a Cache-Control field with the max-age directive, a recipient MUST ignore the Expires field.\n        if (this._rescc[\"max-age\"]) {\n            return toNumberOrZero(this._rescc[\"max-age\"]);\n        }\n        const defaultMinTtl = this._rescc.immutable ? this._immutableMinTtl : 0;\n        const serverDate = this.date();\n        if (this._resHeaders.expires) {\n            const expires = Date.parse(this._resHeaders.expires);\n            // A cache recipient MUST interpret invalid date formats, especially the value \"0\", as representing a time in the past (i.e., \"already expired\").\n            if (Number.isNaN(expires) || expires < serverDate) {\n                return 0;\n            }\n            return Math.max(defaultMinTtl, (expires - serverDate) / 1000);\n        }\n        if (this._resHeaders[\"last-modified\"]) {\n            const lastModified = Date.parse(this._resHeaders[\"last-modified\"]);\n            if (isFinite(lastModified) && serverDate > lastModified) {\n                return Math.max(defaultMinTtl, (serverDate - lastModified) / 1000 * this._cacheHeuristic);\n            }\n        }\n        return defaultMinTtl;\n    }\n    /**\n     * Remaining time this cache entry may be useful for, in *milliseconds*.\n     * You can use this as an expiration time for your cache storage.\n     *\n     * Prefer this method over `maxAge()`, because it includes other factors like `age` and `stale-while-revalidate`.\n     * @returns {number} Time-to-live in milliseconds.\n     */ timeToLive() {\n        const age = this.maxAge() - this.age();\n        const staleIfErrorAge = age + toNumberOrZero(this._rescc[\"stale-if-error\"]);\n        const staleWhileRevalidateAge = age + toNumberOrZero(this._rescc[\"stale-while-revalidate\"]);\n        return Math.round(Math.max(0, age, staleIfErrorAge, staleWhileRevalidateAge) * 1000);\n    }\n    /**\n     * If true, this cache entry is past its expiration date.\n     * Note that stale cache may be useful sometimes, see `evaluateRequest()`.\n     * @returns {boolean} `false` doesn't mean it's fresh nor usable\n     */ stale() {\n        return this.maxAge() <= this.age();\n    }\n    /**\n     * @returns {boolean} `true` if `stale-if-error` condition allows use of a stale response.\n     */ _useStaleIfError() {\n        return this.maxAge() + toNumberOrZero(this._rescc[\"stale-if-error\"]) > this.age();\n    }\n    /** See `evaluateRequest()` for a more complete solution\n     * @returns {boolean} `true` if `stale-while-revalidate` is currently allowed.\n     */ useStaleWhileRevalidate() {\n        const swr = toNumberOrZero(this._rescc[\"stale-while-revalidate\"]);\n        return swr > 0 && this.maxAge() + swr > this.age();\n    }\n    /**\n     * Creates a `CachePolicy` instance from a serialized object.\n     * @param {Object} obj - The serialized object.\n     * @returns {CachePolicy} A new CachePolicy instance.\n     */ static fromObject(obj) {\n        return new this(undefined, undefined, {\n            _fromObject: obj\n        });\n    }\n    /**\n     * @param {any} obj - The serialized object.\n     * @throws {Error} If already initialized or if the object is invalid.\n     */ _fromObject(obj) {\n        if (this._responseTime) throw Error(\"Reinitialized\");\n        if (!obj || obj.v !== 1) throw Error(\"Invalid serialization\");\n        this._responseTime = obj.t;\n        this._isShared = obj.sh;\n        this._cacheHeuristic = obj.ch;\n        this._immutableMinTtl = obj.imm !== undefined ? obj.imm : 24 * 3600 * 1000;\n        this._ignoreCargoCult = !!obj.icc;\n        this._status = obj.st;\n        this._resHeaders = obj.resh;\n        this._rescc = obj.rescc;\n        this._method = obj.m;\n        this._url = obj.u;\n        this._host = obj.h;\n        this._noAuthorization = obj.a;\n        this._reqHeaders = obj.reqh;\n        this._reqcc = obj.reqcc;\n    }\n    /**\n     * Serializes the `CachePolicy` instance into a JSON-serializable object.\n     * @returns {Object} The serialized object.\n     */ toObject() {\n        return {\n            v: 1,\n            t: this._responseTime,\n            sh: this._isShared,\n            ch: this._cacheHeuristic,\n            imm: this._immutableMinTtl,\n            icc: this._ignoreCargoCult,\n            st: this._status,\n            resh: this._resHeaders,\n            rescc: this._rescc,\n            m: this._method,\n            u: this._url,\n            h: this._host,\n            a: this._noAuthorization,\n            reqh: this._reqHeaders,\n            reqcc: this._reqcc\n        };\n    }\n    /**\n     * Headers for sending to the origin server to revalidate stale response.\n     * Allows server to return 304 to allow reuse of the previous response.\n     *\n     * Hop by hop headers are always stripped.\n     * Revalidation headers may be added or removed, depending on request.\n     * @param {HttpRequest} incomingReq - The incoming HTTP request.\n     * @returns {Record<string, string>} The headers for the revalidation request.\n     */ revalidationHeaders(incomingReq) {\n        this._assertRequestHasHeaders(incomingReq);\n        const headers = this._copyWithoutHopByHopHeaders(incomingReq.headers);\n        // This implementation does not understand range requests\n        delete headers[\"if-range\"];\n        if (!this._requestMatches(incomingReq, true) || !this.storable()) {\n            // revalidation allowed via HEAD\n            // not for the same resource, or wasn't allowed to be cached anyway\n            delete headers[\"if-none-match\"];\n            delete headers[\"if-modified-since\"];\n            return headers;\n        }\n        /* MUST send that entity-tag in any cache validation request (using If-Match or If-None-Match) if an entity-tag has been provided by the origin server. */ if (this._resHeaders.etag) {\n            headers[\"if-none-match\"] = headers[\"if-none-match\"] ? `${headers[\"if-none-match\"]}, ${this._resHeaders.etag}` : this._resHeaders.etag;\n        }\n        // Clients MAY issue simple (non-subrange) GET requests with either weak validators or strong validators. Clients MUST NOT use weak validators in other forms of request.\n        const forbidsWeakValidators = headers[\"accept-ranges\"] || headers[\"if-match\"] || headers[\"if-unmodified-since\"] || this._method && this._method != \"GET\";\n        /* SHOULD send the Last-Modified value in non-subrange cache validation requests (using If-Modified-Since) if only a Last-Modified value has been provided by the origin server.\n        Note: This implementation does not understand partial responses (206) */ if (forbidsWeakValidators) {\n            delete headers[\"if-modified-since\"];\n            if (headers[\"if-none-match\"]) {\n                const etags = headers[\"if-none-match\"].split(/,/).filter((etag)=>{\n                    return !/^\\s*W\\//.test(etag);\n                });\n                if (!etags.length) {\n                    delete headers[\"if-none-match\"];\n                } else {\n                    headers[\"if-none-match\"] = etags.join(\",\").trim();\n                }\n            }\n        } else if (this._resHeaders[\"last-modified\"] && !headers[\"if-modified-since\"]) {\n            headers[\"if-modified-since\"] = this._resHeaders[\"last-modified\"];\n        }\n        return headers;\n    }\n    /**\n     * Creates new CachePolicy with information combined from the previews response,\n     * and the new revalidation response.\n     *\n     * Returns {policy, modified} where modified is a boolean indicating\n     * whether the response body has been modified, and old cached body can't be used.\n     *\n     * @param {HttpRequest} request - The latest HTTP request asking for the cached entry.\n     * @param {HttpResponse} response - The latest revalidation HTTP response from the origin server.\n     * @returns {{policy: CachePolicy, modified: boolean, matches: boolean}} The updated policy and modification status.\n     * @throws {Error} If the response headers are missing.\n     */ revalidatedPolicy(request, response) {\n        this._assertRequestHasHeaders(request);\n        if (this._useStaleIfError() && isErrorResponse(response)) {\n            return {\n                policy: this,\n                modified: false,\n                matches: true\n            };\n        }\n        if (!response || !response.headers) {\n            throw Error(\"Response headers missing\");\n        }\n        // These aren't going to be supported exactly, since one CachePolicy object\n        // doesn't know about all the other cached objects.\n        let matches = false;\n        if (response.status !== undefined && response.status != 304) {\n            matches = false;\n        } else if (response.headers.etag && !/^\\s*W\\//.test(response.headers.etag)) {\n            // \"All of the stored responses with the same strong validator are selected.\n            // If none of the stored responses contain the same strong validator,\n            // then the cache MUST NOT use the new response to update any stored responses.\"\n            matches = this._resHeaders.etag && this._resHeaders.etag.replace(/^\\s*W\\//, \"\") === response.headers.etag;\n        } else if (this._resHeaders.etag && response.headers.etag) {\n            // \"If the new response contains a weak validator and that validator corresponds\n            // to one of the cache's stored responses,\n            // then the most recent of those matching stored responses is selected for update.\"\n            matches = this._resHeaders.etag.replace(/^\\s*W\\//, \"\") === response.headers.etag.replace(/^\\s*W\\//, \"\");\n        } else if (this._resHeaders[\"last-modified\"]) {\n            matches = this._resHeaders[\"last-modified\"] === response.headers[\"last-modified\"];\n        } else {\n            // If the new response does not include any form of validator (such as in the case where\n            // a client generates an If-Modified-Since request from a source other than the Last-Modified\n            // response header field), and there is only one stored response, and that stored response also\n            // lacks a validator, then that stored response is selected for update.\n            if (!this._resHeaders.etag && !this._resHeaders[\"last-modified\"] && !response.headers.etag && !response.headers[\"last-modified\"]) {\n                matches = true;\n            }\n        }\n        const optionsCopy = {\n            shared: this._isShared,\n            cacheHeuristic: this._cacheHeuristic,\n            immutableMinTimeToLive: this._immutableMinTtl,\n            ignoreCargoCult: this._ignoreCargoCult\n        };\n        if (!matches) {\n            return {\n                policy: new this.constructor(request, response, optionsCopy),\n                // Client receiving 304 without body, even if it's invalid/mismatched has no option\n                // but to reuse a cached body. We don't have a good way to tell clients to do\n                // error recovery in such case.\n                modified: response.status != 304,\n                matches: false\n            };\n        }\n        // use other header fields provided in the 304 (Not Modified) response to replace all instances\n        // of the corresponding header fields in the stored response.\n        const headers = {};\n        for(const k in this._resHeaders){\n            headers[k] = k in response.headers && !excludedFromRevalidationUpdate[k] ? response.headers[k] : this._resHeaders[k];\n        }\n        const newResponse = Object.assign({}, response, {\n            status: this._status,\n            method: this._method,\n            headers\n        });\n        return {\n            policy: new this.constructor(request, newResponse, optionsCopy),\n            modified: false,\n            matches: true\n        };\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/http-cache-semantics/index.js\n");

/***/ })

};
;