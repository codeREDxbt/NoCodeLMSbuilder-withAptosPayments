"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/http2-wrapper";
exports.ids = ["vendor-chunks/http2-wrapper"];
exports.modules = {

/***/ "(ssr)/./node_modules/http2-wrapper/source/agent.js":
/*!****************************************************!*\
  !*** ./node_modules/http2-wrapper/source/agent.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\nconst tls = __webpack_require__(/*! tls */ \"tls\");\nconst http2 = __webpack_require__(/*! http2 */ \"http2\");\nconst QuickLRU = __webpack_require__(/*! quick-lru */ \"(ssr)/./node_modules/quick-lru/index.js\");\nconst kCurrentStreamsCount = Symbol(\"currentStreamsCount\");\nconst kRequest = Symbol(\"request\");\nconst kOriginSet = Symbol(\"cachedOriginSet\");\nconst kGracefullyClosing = Symbol(\"gracefullyClosing\");\nconst nameKeys = [\n    // `http2.connect()` options\n    \"maxDeflateDynamicTableSize\",\n    \"maxSessionMemory\",\n    \"maxHeaderListPairs\",\n    \"maxOutstandingPings\",\n    \"maxReservedRemoteStreams\",\n    \"maxSendHeaderBlockLength\",\n    \"paddingStrategy\",\n    // `tls.connect()` options\n    \"localAddress\",\n    \"path\",\n    \"rejectUnauthorized\",\n    \"minDHSize\",\n    // `tls.createSecureContext()` options\n    \"ca\",\n    \"cert\",\n    \"clientCertEngine\",\n    \"ciphers\",\n    \"key\",\n    \"pfx\",\n    \"servername\",\n    \"minVersion\",\n    \"maxVersion\",\n    \"secureProtocol\",\n    \"crl\",\n    \"honorCipherOrder\",\n    \"ecdhCurve\",\n    \"dhparam\",\n    \"secureOptions\",\n    \"sessionIdContext\"\n];\nconst getSortedIndex = (array, value, compare)=>{\n    let low = 0;\n    let high = array.length;\n    while(low < high){\n        const mid = low + high >>> 1;\n        /* istanbul ignore next */ if (compare(array[mid], value)) {\n            // This never gets called because we use descending sort. Better to have this anyway.\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return low;\n};\nconst compareSessions = (a, b)=>{\n    return a.remoteSettings.maxConcurrentStreams > b.remoteSettings.maxConcurrentStreams;\n};\n// See https://tools.ietf.org/html/rfc8336\nconst closeCoveredSessions = (where, session)=>{\n    // Clients SHOULD NOT emit new requests on any connection whose Origin\n    // Set is a proper subset of another connection's Origin Set, and they\n    // SHOULD close it once all outstanding requests are satisfied.\n    for (const coveredSession of where){\n        if (// The set is a proper subset when its length is less than the other set.\n        coveredSession[kOriginSet].length < session[kOriginSet].length && // And the other set includes all elements of the subset.\n        coveredSession[kOriginSet].every((origin)=>session[kOriginSet].includes(origin)) && // Makes sure that the session can handle all requests from the covered session.\n        coveredSession[kCurrentStreamsCount] + session[kCurrentStreamsCount] <= session.remoteSettings.maxConcurrentStreams) {\n            // This allows pending requests to finish and prevents making new requests.\n            gracefullyClose(coveredSession);\n        }\n    }\n};\n// This is basically inverted `closeCoveredSessions(...)`.\nconst closeSessionIfCovered = (where, coveredSession)=>{\n    for (const session of where){\n        if (coveredSession[kOriginSet].length < session[kOriginSet].length && coveredSession[kOriginSet].every((origin)=>session[kOriginSet].includes(origin)) && coveredSession[kCurrentStreamsCount] + session[kCurrentStreamsCount] <= session.remoteSettings.maxConcurrentStreams) {\n            gracefullyClose(coveredSession);\n        }\n    }\n};\nconst getSessions = ({ agent, isFree })=>{\n    const result = {};\n    // eslint-disable-next-line guard-for-in\n    for(const normalizedOptions in agent.sessions){\n        const sessions = agent.sessions[normalizedOptions];\n        const filtered = sessions.filter((session)=>{\n            const result = session[Agent.kCurrentStreamsCount] < session.remoteSettings.maxConcurrentStreams;\n            return isFree ? result : !result;\n        });\n        if (filtered.length !== 0) {\n            result[normalizedOptions] = filtered;\n        }\n    }\n    return result;\n};\nconst gracefullyClose = (session)=>{\n    session[kGracefullyClosing] = true;\n    if (session[kCurrentStreamsCount] === 0) {\n        session.close();\n    }\n};\nclass Agent extends EventEmitter {\n    constructor({ timeout = 60000, maxSessions = Infinity, maxFreeSessions = 10, maxCachedTlsSessions = 100 } = {}){\n        super();\n        // A session is considered busy when its current streams count\n        // is equal to or greater than the `maxConcurrentStreams` value.\n        // A session is considered free when its current streams count\n        // is less than the `maxConcurrentStreams` value.\n        // SESSIONS[NORMALIZED_OPTIONS] = [];\n        this.sessions = {};\n        // The queue for creating new sessions. It looks like this:\n        // QUEUE[NORMALIZED_OPTIONS][NORMALIZED_ORIGIN] = ENTRY_FUNCTION\n        //\n        // The entry function has `listeners`, `completed` and `destroyed` properties.\n        // `listeners` is an array of objects containing `resolve` and `reject` functions.\n        // `completed` is a boolean. It's set to true after ENTRY_FUNCTION is executed.\n        // `destroyed` is a boolean. If it's set to true, the session will be destroyed if hasn't connected yet.\n        this.queue = {};\n        // Each session will use this timeout value.\n        this.timeout = timeout;\n        // Max sessions in total\n        this.maxSessions = maxSessions;\n        // Max free sessions in total\n        // TODO: decreasing `maxFreeSessions` should close some sessions\n        this.maxFreeSessions = maxFreeSessions;\n        this._freeSessionsCount = 0;\n        this._sessionsCount = 0;\n        // We don't support push streams by default.\n        this.settings = {\n            enablePush: false\n        };\n        // Reusing TLS sessions increases performance.\n        this.tlsSessionCache = new QuickLRU({\n            maxSize: maxCachedTlsSessions\n        });\n    }\n    static normalizeOrigin(url, servername) {\n        if (typeof url === \"string\") {\n            url = new URL(url);\n        }\n        if (servername && url.hostname !== servername) {\n            url.hostname = servername;\n        }\n        return url.origin;\n    }\n    normalizeOptions(options) {\n        let normalized = \"\";\n        if (options) {\n            for (const key of nameKeys){\n                if (options[key]) {\n                    normalized += `:${options[key]}`;\n                }\n            }\n        }\n        return normalized;\n    }\n    _tryToCreateNewSession(normalizedOptions, normalizedOrigin) {\n        if (!(normalizedOptions in this.queue) || !(normalizedOrigin in this.queue[normalizedOptions])) {\n            return;\n        }\n        const item = this.queue[normalizedOptions][normalizedOrigin];\n        // The entry function can be run only once.\n        // BUG: The session may be never created when:\n        // - the first condition is false AND\n        // - this function is never called with the same arguments in the future.\n        if (this._sessionsCount < this.maxSessions && !item.completed) {\n            item.completed = true;\n            item();\n        }\n    }\n    getSession(origin, options, listeners) {\n        return new Promise((resolve, reject)=>{\n            if (Array.isArray(listeners)) {\n                listeners = [\n                    ...listeners\n                ];\n                // Resolve the current promise ASAP, we're just moving the listeners.\n                // They will be executed at a different time.\n                resolve();\n            } else {\n                listeners = [\n                    {\n                        resolve,\n                        reject\n                    }\n                ];\n            }\n            const normalizedOptions = this.normalizeOptions(options);\n            const normalizedOrigin = Agent.normalizeOrigin(origin, options && options.servername);\n            if (normalizedOrigin === undefined) {\n                for (const { reject } of listeners){\n                    reject(new TypeError(\"The `origin` argument needs to be a string or an URL object\"));\n                }\n                return;\n            }\n            if (normalizedOptions in this.sessions) {\n                const sessions = this.sessions[normalizedOptions];\n                let maxConcurrentStreams = -1;\n                let currentStreamsCount = -1;\n                let optimalSession;\n                // We could just do this.sessions[normalizedOptions].find(...) but that isn't optimal.\n                // Additionally, we are looking for session which has biggest current pending streams count.\n                for (const session of sessions){\n                    const sessionMaxConcurrentStreams = session.remoteSettings.maxConcurrentStreams;\n                    if (sessionMaxConcurrentStreams < maxConcurrentStreams) {\n                        break;\n                    }\n                    if (session[kOriginSet].includes(normalizedOrigin)) {\n                        const sessionCurrentStreamsCount = session[kCurrentStreamsCount];\n                        if (sessionCurrentStreamsCount >= sessionMaxConcurrentStreams || session[kGracefullyClosing] || // Unfortunately the `close` event isn't called immediately,\n                        // so `session.destroyed` is `true`, but `session.closed` is `false`.\n                        session.destroyed) {\n                            continue;\n                        }\n                        // We only need set this once.\n                        if (!optimalSession) {\n                            maxConcurrentStreams = sessionMaxConcurrentStreams;\n                        }\n                        // We're looking for the session which has biggest current pending stream count,\n                        // in order to minimalize the amount of active sessions.\n                        if (sessionCurrentStreamsCount > currentStreamsCount) {\n                            optimalSession = session;\n                            currentStreamsCount = sessionCurrentStreamsCount;\n                        }\n                    }\n                }\n                if (optimalSession) {\n                    /* istanbul ignore next: safety check */ if (listeners.length !== 1) {\n                        for (const { reject } of listeners){\n                            const error = new Error(`Expected the length of listeners to be 1, got ${listeners.length}.\\n` + \"Please report this to https://github.com/szmarczak/http2-wrapper/\");\n                            reject(error);\n                        }\n                        return;\n                    }\n                    listeners[0].resolve(optimalSession);\n                    return;\n                }\n            }\n            if (normalizedOptions in this.queue) {\n                if (normalizedOrigin in this.queue[normalizedOptions]) {\n                    // There's already an item in the queue, just attach ourselves to it.\n                    this.queue[normalizedOptions][normalizedOrigin].listeners.push(...listeners);\n                    // This shouldn't be executed here.\n                    // See the comment inside _tryToCreateNewSession.\n                    this._tryToCreateNewSession(normalizedOptions, normalizedOrigin);\n                    return;\n                }\n            } else {\n                this.queue[normalizedOptions] = {};\n            }\n            // The entry must be removed from the queue IMMEDIATELY when:\n            // 1. the session connects successfully,\n            // 2. an error occurs.\n            const removeFromQueue = ()=>{\n                // Our entry can be replaced. We cannot remove the new one.\n                if (normalizedOptions in this.queue && this.queue[normalizedOptions][normalizedOrigin] === entry) {\n                    delete this.queue[normalizedOptions][normalizedOrigin];\n                    if (Object.keys(this.queue[normalizedOptions]).length === 0) {\n                        delete this.queue[normalizedOptions];\n                    }\n                }\n            };\n            // The main logic is here\n            const entry = ()=>{\n                const name = `${normalizedOrigin}:${normalizedOptions}`;\n                let receivedSettings = false;\n                try {\n                    const session = http2.connect(origin, {\n                        createConnection: this.createConnection,\n                        settings: this.settings,\n                        session: this.tlsSessionCache.get(name),\n                        ...options\n                    });\n                    session[kCurrentStreamsCount] = 0;\n                    session[kGracefullyClosing] = false;\n                    const isFree = ()=>session[kCurrentStreamsCount] < session.remoteSettings.maxConcurrentStreams;\n                    let wasFree = true;\n                    session.socket.once(\"session\", (tlsSession)=>{\n                        this.tlsSessionCache.set(name, tlsSession);\n                    });\n                    session.once(\"error\", (error)=>{\n                        // Listeners are empty when the session successfully connected.\n                        for (const { reject } of listeners){\n                            reject(error);\n                        }\n                        // The connection got broken, purge the cache.\n                        this.tlsSessionCache.delete(name);\n                    });\n                    session.setTimeout(this.timeout, ()=>{\n                        // Terminates all streams owned by this session.\n                        // TODO: Maybe the streams should have a \"Session timed out\" error?\n                        session.destroy();\n                    });\n                    session.once(\"close\", ()=>{\n                        if (receivedSettings) {\n                            // 1. If it wasn't free then no need to decrease because\n                            //    it has been decreased already in session.request().\n                            // 2. `stream.once('close')` won't increment the count\n                            //    because the session is already closed.\n                            if (wasFree) {\n                                this._freeSessionsCount--;\n                            }\n                            this._sessionsCount--;\n                            // This cannot be moved to the stream logic,\n                            // because there may be a session that hadn't made a single request.\n                            const where = this.sessions[normalizedOptions];\n                            where.splice(where.indexOf(session), 1);\n                            if (where.length === 0) {\n                                delete this.sessions[normalizedOptions];\n                            }\n                        } else {\n                            // Broken connection\n                            const error = new Error(\"Session closed without receiving a SETTINGS frame\");\n                            error.code = \"HTTP2WRAPPER_NOSETTINGS\";\n                            for (const { reject } of listeners){\n                                reject(error);\n                            }\n                            removeFromQueue();\n                        }\n                        // There may be another session awaiting.\n                        this._tryToCreateNewSession(normalizedOptions, normalizedOrigin);\n                    });\n                    // Iterates over the queue and processes listeners.\n                    const processListeners = ()=>{\n                        if (!(normalizedOptions in this.queue) || !isFree()) {\n                            return;\n                        }\n                        for (const origin of session[kOriginSet]){\n                            if (origin in this.queue[normalizedOptions]) {\n                                const { listeners } = this.queue[normalizedOptions][origin];\n                                // Prevents session overloading.\n                                while(listeners.length !== 0 && isFree()){\n                                    // We assume `resolve(...)` calls `request(...)` *directly*,\n                                    // otherwise the session will get overloaded.\n                                    listeners.shift().resolve(session);\n                                }\n                                const where = this.queue[normalizedOptions];\n                                if (where[origin].listeners.length === 0) {\n                                    delete where[origin];\n                                    if (Object.keys(where).length === 0) {\n                                        delete this.queue[normalizedOptions];\n                                        break;\n                                    }\n                                }\n                                // We're no longer free, no point in continuing.\n                                if (!isFree()) {\n                                    break;\n                                }\n                            }\n                        }\n                    };\n                    // The Origin Set cannot shrink. No need to check if it suddenly became covered by another one.\n                    session.on(\"origin\", ()=>{\n                        session[kOriginSet] = session.originSet;\n                        if (!isFree()) {\n                            // The session is full.\n                            return;\n                        }\n                        processListeners();\n                        // Close covered sessions (if possible).\n                        closeCoveredSessions(this.sessions[normalizedOptions], session);\n                    });\n                    session.once(\"remoteSettings\", ()=>{\n                        // Fix Node.js bug preventing the process from exiting\n                        session.ref();\n                        session.unref();\n                        this._sessionsCount++;\n                        // The Agent could have been destroyed already.\n                        if (entry.destroyed) {\n                            const error = new Error(\"Agent has been destroyed\");\n                            for (const listener of listeners){\n                                listener.reject(error);\n                            }\n                            session.destroy();\n                            return;\n                        }\n                        session[kOriginSet] = session.originSet;\n                        {\n                            const where = this.sessions;\n                            if (normalizedOptions in where) {\n                                const sessions = where[normalizedOptions];\n                                sessions.splice(getSortedIndex(sessions, session, compareSessions), 0, session);\n                            } else {\n                                where[normalizedOptions] = [\n                                    session\n                                ];\n                            }\n                        }\n                        this._freeSessionsCount += 1;\n                        receivedSettings = true;\n                        this.emit(\"session\", session);\n                        processListeners();\n                        removeFromQueue();\n                        // TODO: Close last recently used (or least used?) session\n                        if (session[kCurrentStreamsCount] === 0 && this._freeSessionsCount > this.maxFreeSessions) {\n                            session.close();\n                        }\n                        // Check if we haven't managed to execute all listeners.\n                        if (listeners.length !== 0) {\n                            // Request for a new session with predefined listeners.\n                            this.getSession(normalizedOrigin, options, listeners);\n                            listeners.length = 0;\n                        }\n                        // `session.remoteSettings.maxConcurrentStreams` might get increased\n                        session.on(\"remoteSettings\", ()=>{\n                            processListeners();\n                            // In case the Origin Set changes\n                            closeCoveredSessions(this.sessions[normalizedOptions], session);\n                        });\n                    });\n                    // Shim `session.request()` in order to catch all streams\n                    session[kRequest] = session.request;\n                    session.request = (headers, streamOptions)=>{\n                        if (session[kGracefullyClosing]) {\n                            throw new Error(\"The session is gracefully closing. No new streams are allowed.\");\n                        }\n                        const stream = session[kRequest](headers, streamOptions);\n                        // The process won't exit until the session is closed or all requests are gone.\n                        session.ref();\n                        ++session[kCurrentStreamsCount];\n                        if (session[kCurrentStreamsCount] === session.remoteSettings.maxConcurrentStreams) {\n                            this._freeSessionsCount--;\n                        }\n                        stream.once(\"close\", ()=>{\n                            wasFree = isFree();\n                            --session[kCurrentStreamsCount];\n                            if (!session.destroyed && !session.closed) {\n                                closeSessionIfCovered(this.sessions[normalizedOptions], session);\n                                if (isFree() && !session.closed) {\n                                    if (!wasFree) {\n                                        this._freeSessionsCount++;\n                                        wasFree = true;\n                                    }\n                                    const isEmpty = session[kCurrentStreamsCount] === 0;\n                                    if (isEmpty) {\n                                        session.unref();\n                                    }\n                                    if (isEmpty && (this._freeSessionsCount > this.maxFreeSessions || session[kGracefullyClosing])) {\n                                        session.close();\n                                    } else {\n                                        closeCoveredSessions(this.sessions[normalizedOptions], session);\n                                        processListeners();\n                                    }\n                                }\n                            }\n                        });\n                        return stream;\n                    };\n                } catch (error) {\n                    for (const listener of listeners){\n                        listener.reject(error);\n                    }\n                    removeFromQueue();\n                }\n            };\n            entry.listeners = listeners;\n            entry.completed = false;\n            entry.destroyed = false;\n            this.queue[normalizedOptions][normalizedOrigin] = entry;\n            this._tryToCreateNewSession(normalizedOptions, normalizedOrigin);\n        });\n    }\n    request(origin, options, headers, streamOptions) {\n        return new Promise((resolve, reject)=>{\n            this.getSession(origin, options, [\n                {\n                    reject,\n                    resolve: (session)=>{\n                        try {\n                            resolve(session.request(headers, streamOptions));\n                        } catch (error) {\n                            reject(error);\n                        }\n                    }\n                }\n            ]);\n        });\n    }\n    createConnection(origin, options) {\n        return Agent.connect(origin, options);\n    }\n    static connect(origin, options) {\n        options.ALPNProtocols = [\n            \"h2\"\n        ];\n        const port = origin.port || 443;\n        const host = origin.hostname || origin.host;\n        if (typeof options.servername === \"undefined\") {\n            options.servername = host;\n        }\n        return tls.connect(port, host, options);\n    }\n    closeFreeSessions() {\n        for (const sessions of Object.values(this.sessions)){\n            for (const session of sessions){\n                if (session[kCurrentStreamsCount] === 0) {\n                    session.close();\n                }\n            }\n        }\n    }\n    destroy(reason) {\n        for (const sessions of Object.values(this.sessions)){\n            for (const session of sessions){\n                session.destroy(reason);\n            }\n        }\n        for (const entriesOfAuthority of Object.values(this.queue)){\n            for (const entry of Object.values(entriesOfAuthority)){\n                entry.destroyed = true;\n            }\n        }\n        // New requests should NOT attach to destroyed sessions\n        this.queue = {};\n    }\n    get freeSessions() {\n        return getSessions({\n            agent: this,\n            isFree: true\n        });\n    }\n    get busySessions() {\n        return getSessions({\n            agent: this,\n            isFree: false\n        });\n    }\n}\nAgent.kCurrentStreamsCount = kCurrentStreamsCount;\nAgent.kGracefullyClosing = kGracefullyClosing;\nmodule.exports = {\n    Agent,\n    globalAgent: new Agent()\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/http2-wrapper/source/agent.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/http2-wrapper/source/auto.js":
/*!***************************************************!*\
  !*** ./node_modules/http2-wrapper/source/auto.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst http = __webpack_require__(/*! http */ \"http\");\nconst https = __webpack_require__(/*! https */ \"https\");\nconst resolveALPN = __webpack_require__(/*! resolve-alpn */ \"(ssr)/./node_modules/resolve-alpn/index.js\");\nconst QuickLRU = __webpack_require__(/*! quick-lru */ \"(ssr)/./node_modules/quick-lru/index.js\");\nconst Http2ClientRequest = __webpack_require__(/*! ./client-request */ \"(ssr)/./node_modules/http2-wrapper/source/client-request.js\");\nconst calculateServerName = __webpack_require__(/*! ./utils/calculate-server-name */ \"(ssr)/./node_modules/http2-wrapper/source/utils/calculate-server-name.js\");\nconst urlToOptions = __webpack_require__(/*! ./utils/url-to-options */ \"(ssr)/./node_modules/http2-wrapper/source/utils/url-to-options.js\");\nconst cache = new QuickLRU({\n    maxSize: 100\n});\nconst queue = new Map();\nconst installSocket = (agent, socket, options)=>{\n    socket._httpMessage = {\n        shouldKeepAlive: true\n    };\n    const onFree = ()=>{\n        agent.emit(\"free\", socket, options);\n    };\n    socket.on(\"free\", onFree);\n    const onClose = ()=>{\n        agent.removeSocket(socket, options);\n    };\n    socket.on(\"close\", onClose);\n    const onRemove = ()=>{\n        agent.removeSocket(socket, options);\n        socket.off(\"close\", onClose);\n        socket.off(\"free\", onFree);\n        socket.off(\"agentRemove\", onRemove);\n    };\n    socket.on(\"agentRemove\", onRemove);\n    agent.emit(\"free\", socket, options);\n};\nconst resolveProtocol = async (options)=>{\n    const name = `${options.host}:${options.port}:${options.ALPNProtocols.sort()}`;\n    if (!cache.has(name)) {\n        if (queue.has(name)) {\n            const result = await queue.get(name);\n            return result.alpnProtocol;\n        }\n        const { path, agent } = options;\n        options.path = options.socketPath;\n        const resultPromise = resolveALPN(options);\n        queue.set(name, resultPromise);\n        try {\n            const { socket, alpnProtocol } = await resultPromise;\n            cache.set(name, alpnProtocol);\n            options.path = path;\n            if (alpnProtocol === \"h2\") {\n                // https://github.com/nodejs/node/issues/33343\n                socket.destroy();\n            } else {\n                const { globalAgent } = https;\n                const defaultCreateConnection = https.Agent.prototype.createConnection;\n                if (agent) {\n                    if (agent.createConnection === defaultCreateConnection) {\n                        installSocket(agent, socket, options);\n                    } else {\n                        socket.destroy();\n                    }\n                } else if (globalAgent.createConnection === defaultCreateConnection) {\n                    installSocket(globalAgent, socket, options);\n                } else {\n                    socket.destroy();\n                }\n            }\n            queue.delete(name);\n            return alpnProtocol;\n        } catch (error) {\n            queue.delete(name);\n            throw error;\n        }\n    }\n    return cache.get(name);\n};\nmodule.exports = async (input, options, callback)=>{\n    if (typeof input === \"string\" || input instanceof URL) {\n        input = urlToOptions(new URL(input));\n    }\n    if (typeof options === \"function\") {\n        callback = options;\n        options = undefined;\n    }\n    options = {\n        ALPNProtocols: [\n            \"h2\",\n            \"http/1.1\"\n        ],\n        ...input,\n        ...options,\n        resolveSocket: true\n    };\n    if (!Array.isArray(options.ALPNProtocols) || options.ALPNProtocols.length === 0) {\n        throw new Error(\"The `ALPNProtocols` option must be an Array with at least one entry\");\n    }\n    options.protocol = options.protocol || \"https:\";\n    const isHttps = options.protocol === \"https:\";\n    options.host = options.hostname || options.host || \"localhost\";\n    options.session = options.tlsSession;\n    options.servername = options.servername || calculateServerName(options);\n    options.port = options.port || (isHttps ? 443 : 80);\n    options._defaultAgent = isHttps ? https.globalAgent : http.globalAgent;\n    const agents = options.agent;\n    if (agents) {\n        if (agents.addRequest) {\n            throw new Error(\"The `options.agent` object can contain only `http`, `https` or `http2` properties\");\n        }\n        options.agent = agents[isHttps ? \"https\" : \"http\"];\n    }\n    if (isHttps) {\n        const protocol = await resolveProtocol(options);\n        if (protocol === \"h2\") {\n            if (agents) {\n                options.agent = agents.http2;\n            }\n            return new Http2ClientRequest(options, callback);\n        }\n    }\n    return http.request(options, callback);\n};\nmodule.exports.protocolCache = cache;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/http2-wrapper/source/auto.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/http2-wrapper/source/client-request.js":
/*!*************************************************************!*\
  !*** ./node_modules/http2-wrapper/source/client-request.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst http2 = __webpack_require__(/*! http2 */ \"http2\");\nconst { Writable } = __webpack_require__(/*! stream */ \"stream\");\nconst { Agent, globalAgent } = __webpack_require__(/*! ./agent */ \"(ssr)/./node_modules/http2-wrapper/source/agent.js\");\nconst IncomingMessage = __webpack_require__(/*! ./incoming-message */ \"(ssr)/./node_modules/http2-wrapper/source/incoming-message.js\");\nconst urlToOptions = __webpack_require__(/*! ./utils/url-to-options */ \"(ssr)/./node_modules/http2-wrapper/source/utils/url-to-options.js\");\nconst proxyEvents = __webpack_require__(/*! ./utils/proxy-events */ \"(ssr)/./node_modules/http2-wrapper/source/utils/proxy-events.js\");\nconst isRequestPseudoHeader = __webpack_require__(/*! ./utils/is-request-pseudo-header */ \"(ssr)/./node_modules/http2-wrapper/source/utils/is-request-pseudo-header.js\");\nconst { ERR_INVALID_ARG_TYPE, ERR_INVALID_PROTOCOL, ERR_HTTP_HEADERS_SENT, ERR_INVALID_HTTP_TOKEN, ERR_HTTP_INVALID_HEADER_VALUE, ERR_INVALID_CHAR } = __webpack_require__(/*! ./utils/errors */ \"(ssr)/./node_modules/http2-wrapper/source/utils/errors.js\");\nconst { HTTP2_HEADER_STATUS, HTTP2_HEADER_METHOD, HTTP2_HEADER_PATH, HTTP2_METHOD_CONNECT } = http2.constants;\nconst kHeaders = Symbol(\"headers\");\nconst kOrigin = Symbol(\"origin\");\nconst kSession = Symbol(\"session\");\nconst kOptions = Symbol(\"options\");\nconst kFlushedHeaders = Symbol(\"flushedHeaders\");\nconst kJobs = Symbol(\"jobs\");\nconst isValidHttpToken = /^[\\^`\\-\\w!#$%&*+.|~]+$/;\nconst isInvalidHeaderValue = /[^\\t\\u0020-\\u007E\\u0080-\\u00FF]/;\nclass ClientRequest extends Writable {\n    constructor(input, options, callback){\n        super({\n            autoDestroy: false\n        });\n        const hasInput = typeof input === \"string\" || input instanceof URL;\n        if (hasInput) {\n            input = urlToOptions(input instanceof URL ? input : new URL(input));\n        }\n        if (typeof options === \"function\" || options === undefined) {\n            // (options, callback)\n            callback = options;\n            options = hasInput ? input : {\n                ...input\n            };\n        } else {\n            // (input, options, callback)\n            options = {\n                ...input,\n                ...options\n            };\n        }\n        if (options.h2session) {\n            this[kSession] = options.h2session;\n        } else if (options.agent === false) {\n            this.agent = new Agent({\n                maxFreeSessions: 0\n            });\n        } else if (typeof options.agent === \"undefined\" || options.agent === null) {\n            if (typeof options.createConnection === \"function\") {\n                // This is a workaround - we don't have to create the session on our own.\n                this.agent = new Agent({\n                    maxFreeSessions: 0\n                });\n                this.agent.createConnection = options.createConnection;\n            } else {\n                this.agent = globalAgent;\n            }\n        } else if (typeof options.agent.request === \"function\") {\n            this.agent = options.agent;\n        } else {\n            throw new ERR_INVALID_ARG_TYPE(\"options.agent\", [\n                \"Agent-like Object\",\n                \"undefined\",\n                \"false\"\n            ], options.agent);\n        }\n        if (options.protocol && options.protocol !== \"https:\") {\n            throw new ERR_INVALID_PROTOCOL(options.protocol, \"https:\");\n        }\n        const port = options.port || options.defaultPort || this.agent && this.agent.defaultPort || 443;\n        const host = options.hostname || options.host || \"localhost\";\n        // Don't enforce the origin via options. It may be changed in an Agent.\n        delete options.hostname;\n        delete options.host;\n        delete options.port;\n        const { timeout } = options;\n        options.timeout = undefined;\n        this[kHeaders] = Object.create(null);\n        this[kJobs] = [];\n        this.socket = null;\n        this.connection = null;\n        this.method = options.method || \"GET\";\n        this.path = options.path;\n        this.res = null;\n        this.aborted = false;\n        this.reusedSocket = false;\n        if (options.headers) {\n            for (const [header, value] of Object.entries(options.headers)){\n                this.setHeader(header, value);\n            }\n        }\n        if (options.auth && !(\"authorization\" in this[kHeaders])) {\n            this[kHeaders].authorization = \"Basic \" + Buffer.from(options.auth).toString(\"base64\");\n        }\n        options.session = options.tlsSession;\n        options.path = options.socketPath;\n        this[kOptions] = options;\n        // Clients that generate HTTP/2 requests directly SHOULD use the :authority pseudo-header field instead of the Host header field.\n        if (port === 443) {\n            this[kOrigin] = `https://${host}`;\n            if (!(\":authority\" in this[kHeaders])) {\n                this[kHeaders][\":authority\"] = host;\n            }\n        } else {\n            this[kOrigin] = `https://${host}:${port}`;\n            if (!(\":authority\" in this[kHeaders])) {\n                this[kHeaders][\":authority\"] = `${host}:${port}`;\n            }\n        }\n        if (timeout) {\n            this.setTimeout(timeout);\n        }\n        if (callback) {\n            this.once(\"response\", callback);\n        }\n        this[kFlushedHeaders] = false;\n    }\n    get method() {\n        return this[kHeaders][HTTP2_HEADER_METHOD];\n    }\n    set method(value) {\n        if (value) {\n            this[kHeaders][HTTP2_HEADER_METHOD] = value.toUpperCase();\n        }\n    }\n    get path() {\n        return this[kHeaders][HTTP2_HEADER_PATH];\n    }\n    set path(value) {\n        if (value) {\n            this[kHeaders][HTTP2_HEADER_PATH] = value;\n        }\n    }\n    get _mustNotHaveABody() {\n        return this.method === \"GET\" || this.method === \"HEAD\" || this.method === \"DELETE\";\n    }\n    _write(chunk, encoding, callback) {\n        // https://github.com/nodejs/node/blob/654df09ae0c5e17d1b52a900a545f0664d8c7627/lib/internal/http2/util.js#L148-L156\n        if (this._mustNotHaveABody) {\n            callback(new Error(\"The GET, HEAD and DELETE methods must NOT have a body\"));\n            /* istanbul ignore next: Node.js 12 throws directly */ return;\n        }\n        this.flushHeaders();\n        const callWrite = ()=>this._request.write(chunk, encoding, callback);\n        if (this._request) {\n            callWrite();\n        } else {\n            this[kJobs].push(callWrite);\n        }\n    }\n    _final(callback) {\n        if (this.destroyed) {\n            return;\n        }\n        this.flushHeaders();\n        const callEnd = ()=>{\n            // For GET, HEAD and DELETE\n            if (this._mustNotHaveABody) {\n                callback();\n                return;\n            }\n            this._request.end(callback);\n        };\n        if (this._request) {\n            callEnd();\n        } else {\n            this[kJobs].push(callEnd);\n        }\n    }\n    abort() {\n        if (this.res && this.res.complete) {\n            return;\n        }\n        if (!this.aborted) {\n            process.nextTick(()=>this.emit(\"abort\"));\n        }\n        this.aborted = true;\n        this.destroy();\n    }\n    _destroy(error, callback) {\n        if (this.res) {\n            this.res._dump();\n        }\n        if (this._request) {\n            this._request.destroy();\n        }\n        callback(error);\n    }\n    async flushHeaders() {\n        if (this[kFlushedHeaders] || this.destroyed) {\n            return;\n        }\n        this[kFlushedHeaders] = true;\n        const isConnectMethod = this.method === HTTP2_METHOD_CONNECT;\n        // The real magic is here\n        const onStream = (stream)=>{\n            this._request = stream;\n            if (this.destroyed) {\n                stream.destroy();\n                return;\n            }\n            // Forwards `timeout`, `continue`, `close` and `error` events to this instance.\n            if (!isConnectMethod) {\n                proxyEvents(stream, this, [\n                    \"timeout\",\n                    \"continue\",\n                    \"close\",\n                    \"error\"\n                ]);\n            }\n            // Wait for the `finish` event. We don't want to emit the `response` event\n            // before `request.end()` is called.\n            const waitForEnd = (fn)=>{\n                return (...args)=>{\n                    if (!this.writable && !this.destroyed) {\n                        fn(...args);\n                    } else {\n                        this.once(\"finish\", ()=>{\n                            fn(...args);\n                        });\n                    }\n                };\n            };\n            // This event tells we are ready to listen for the data.\n            stream.once(\"response\", waitForEnd((headers, flags, rawHeaders)=>{\n                // If we were to emit raw request stream, it would be as fast as the native approach.\n                // Note that wrapping the raw stream in a Proxy instance won't improve the performance (already tested it).\n                const response = new IncomingMessage(this.socket, stream.readableHighWaterMark);\n                this.res = response;\n                response.req = this;\n                response.statusCode = headers[HTTP2_HEADER_STATUS];\n                response.headers = headers;\n                response.rawHeaders = rawHeaders;\n                response.once(\"end\", ()=>{\n                    if (this.aborted) {\n                        response.aborted = true;\n                        response.emit(\"aborted\");\n                    } else {\n                        response.complete = true;\n                        // Has no effect, just be consistent with the Node.js behavior\n                        response.socket = null;\n                        response.connection = null;\n                    }\n                });\n                if (isConnectMethod) {\n                    response.upgrade = true;\n                    // The HTTP1 API says the socket is detached here,\n                    // but we can't do that so we pass the original HTTP2 request.\n                    if (this.emit(\"connect\", response, stream, Buffer.alloc(0))) {\n                        this.emit(\"close\");\n                    } else {\n                        // No listeners attached, destroy the original request.\n                        stream.destroy();\n                    }\n                } else {\n                    // Forwards data\n                    stream.on(\"data\", (chunk)=>{\n                        if (!response._dumped && !response.push(chunk)) {\n                            stream.pause();\n                        }\n                    });\n                    stream.once(\"end\", ()=>{\n                        response.push(null);\n                    });\n                    if (!this.emit(\"response\", response)) {\n                        // No listeners attached, dump the response.\n                        response._dump();\n                    }\n                }\n            }));\n            // Emits `information` event\n            stream.once(\"headers\", waitForEnd((headers)=>this.emit(\"information\", {\n                    statusCode: headers[HTTP2_HEADER_STATUS]\n                })));\n            stream.once(\"trailers\", waitForEnd((trailers, flags, rawTrailers)=>{\n                const { res } = this;\n                // Assigns trailers to the response object.\n                res.trailers = trailers;\n                res.rawTrailers = rawTrailers;\n            }));\n            const { socket } = stream.session;\n            this.socket = socket;\n            this.connection = socket;\n            for (const job of this[kJobs]){\n                job();\n            }\n            this.emit(\"socket\", this.socket);\n        };\n        // Makes a HTTP2 request\n        if (this[kSession]) {\n            try {\n                onStream(this[kSession].request(this[kHeaders]));\n            } catch (error) {\n                this.emit(\"error\", error);\n            }\n        } else {\n            this.reusedSocket = true;\n            try {\n                onStream(await this.agent.request(this[kOrigin], this[kOptions], this[kHeaders]));\n            } catch (error) {\n                this.emit(\"error\", error);\n            }\n        }\n    }\n    getHeader(name) {\n        if (typeof name !== \"string\") {\n            throw new ERR_INVALID_ARG_TYPE(\"name\", \"string\", name);\n        }\n        return this[kHeaders][name.toLowerCase()];\n    }\n    get headersSent() {\n        return this[kFlushedHeaders];\n    }\n    removeHeader(name) {\n        if (typeof name !== \"string\") {\n            throw new ERR_INVALID_ARG_TYPE(\"name\", \"string\", name);\n        }\n        if (this.headersSent) {\n            throw new ERR_HTTP_HEADERS_SENT(\"remove\");\n        }\n        delete this[kHeaders][name.toLowerCase()];\n    }\n    setHeader(name, value) {\n        if (this.headersSent) {\n            throw new ERR_HTTP_HEADERS_SENT(\"set\");\n        }\n        if (typeof name !== \"string\" || !isValidHttpToken.test(name) && !isRequestPseudoHeader(name)) {\n            throw new ERR_INVALID_HTTP_TOKEN(\"Header name\", name);\n        }\n        if (typeof value === \"undefined\") {\n            throw new ERR_HTTP_INVALID_HEADER_VALUE(value, name);\n        }\n        if (isInvalidHeaderValue.test(value)) {\n            throw new ERR_INVALID_CHAR(\"header content\", name);\n        }\n        this[kHeaders][name.toLowerCase()] = value;\n    }\n    setNoDelay() {\n    // HTTP2 sockets cannot be malformed, do nothing.\n    }\n    setSocketKeepAlive() {\n    // HTTP2 sockets cannot be malformed, do nothing.\n    }\n    setTimeout(ms, callback) {\n        const applyTimeout = ()=>this._request.setTimeout(ms, callback);\n        if (this._request) {\n            applyTimeout();\n        } else {\n            this[kJobs].push(applyTimeout);\n        }\n        return this;\n    }\n    get maxHeadersCount() {\n        if (!this.destroyed && this._request) {\n            return this._request.session.localSettings.maxHeaderListSize;\n        }\n        return undefined;\n    }\n    set maxHeadersCount(_value) {\n    // Updating HTTP2 settings would affect all requests, do nothing.\n    }\n}\nmodule.exports = ClientRequest;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/http2-wrapper/source/client-request.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/http2-wrapper/source/incoming-message.js":
/*!***************************************************************!*\
  !*** ./node_modules/http2-wrapper/source/incoming-message.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { Readable } = __webpack_require__(/*! stream */ \"stream\");\nclass IncomingMessage extends Readable {\n    constructor(socket, highWaterMark){\n        super({\n            highWaterMark,\n            autoDestroy: false\n        });\n        this.statusCode = null;\n        this.statusMessage = \"\";\n        this.httpVersion = \"2.0\";\n        this.httpVersionMajor = 2;\n        this.httpVersionMinor = 0;\n        this.headers = {};\n        this.trailers = {};\n        this.req = null;\n        this.aborted = false;\n        this.complete = false;\n        this.upgrade = null;\n        this.rawHeaders = [];\n        this.rawTrailers = [];\n        this.socket = socket;\n        this.connection = socket;\n        this._dumped = false;\n    }\n    _destroy(error) {\n        this.req._request.destroy(error);\n    }\n    setTimeout(ms, callback) {\n        this.req.setTimeout(ms, callback);\n        return this;\n    }\n    _dump() {\n        if (!this._dumped) {\n            this._dumped = true;\n            this.removeAllListeners(\"data\");\n            this.resume();\n        }\n    }\n    _read() {\n        if (this.req) {\n            this.req._request.resume();\n        }\n    }\n}\nmodule.exports = IncomingMessage;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaHR0cDItd3JhcHBlci9zb3VyY2UvaW5jb21pbmctbWVzc2FnZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBLE1BQU0sRUFBQ0EsUUFBUSxFQUFDLEdBQUdDLG1CQUFPQSxDQUFDO0FBRTNCLE1BQU1DLHdCQUF3QkY7SUFDN0JHLFlBQVlDLE1BQU0sRUFBRUMsYUFBYSxDQUFFO1FBQ2xDLEtBQUssQ0FBQztZQUNMQTtZQUNBQyxhQUFhO1FBQ2Q7UUFFQSxJQUFJLENBQUNDLFVBQVUsR0FBRztRQUNsQixJQUFJLENBQUNDLGFBQWEsR0FBRztRQUNyQixJQUFJLENBQUNDLFdBQVcsR0FBRztRQUNuQixJQUFJLENBQUNDLGdCQUFnQixHQUFHO1FBQ3hCLElBQUksQ0FBQ0MsZ0JBQWdCLEdBQUc7UUFDeEIsSUFBSSxDQUFDQyxPQUFPLEdBQUcsQ0FBQztRQUNoQixJQUFJLENBQUNDLFFBQVEsR0FBRyxDQUFDO1FBQ2pCLElBQUksQ0FBQ0MsR0FBRyxHQUFHO1FBRVgsSUFBSSxDQUFDQyxPQUFPLEdBQUc7UUFDZixJQUFJLENBQUNDLFFBQVEsR0FBRztRQUNoQixJQUFJLENBQUNDLE9BQU8sR0FBRztRQUVmLElBQUksQ0FBQ0MsVUFBVSxHQUFHLEVBQUU7UUFDcEIsSUFBSSxDQUFDQyxXQUFXLEdBQUcsRUFBRTtRQUVyQixJQUFJLENBQUNmLE1BQU0sR0FBR0E7UUFDZCxJQUFJLENBQUNnQixVQUFVLEdBQUdoQjtRQUVsQixJQUFJLENBQUNpQixPQUFPLEdBQUc7SUFDaEI7SUFFQUMsU0FBU0MsS0FBSyxFQUFFO1FBQ2YsSUFBSSxDQUFDVCxHQUFHLENBQUNVLFFBQVEsQ0FBQ0MsT0FBTyxDQUFDRjtJQUMzQjtJQUVBRyxXQUFXQyxFQUFFLEVBQUVDLFFBQVEsRUFBRTtRQUN4QixJQUFJLENBQUNkLEdBQUcsQ0FBQ1ksVUFBVSxDQUFDQyxJQUFJQztRQUN4QixPQUFPLElBQUk7SUFDWjtJQUVBQyxRQUFRO1FBQ1AsSUFBSSxDQUFDLElBQUksQ0FBQ1IsT0FBTyxFQUFFO1lBQ2xCLElBQUksQ0FBQ0EsT0FBTyxHQUFHO1lBRWYsSUFBSSxDQUFDUyxrQkFBa0IsQ0FBQztZQUN4QixJQUFJLENBQUNDLE1BQU07UUFDWjtJQUNEO0lBRUFDLFFBQVE7UUFDUCxJQUFJLElBQUksQ0FBQ2xCLEdBQUcsRUFBRTtZQUNiLElBQUksQ0FBQ0EsR0FBRyxDQUFDVSxRQUFRLENBQUNPLE1BQU07UUFDekI7SUFDRDtBQUNEO0FBRUFFLE9BQU9DLE9BQU8sR0FBR2hDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbm9jb2RlLWxtcy1idWlsZGVyLy4vbm9kZV9tb2R1bGVzL2h0dHAyLXdyYXBwZXIvc291cmNlL2luY29taW5nLW1lc3NhZ2UuanM/NTliOSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCB7UmVhZGFibGV9ID0gcmVxdWlyZSgnc3RyZWFtJyk7XG5cbmNsYXNzIEluY29taW5nTWVzc2FnZSBleHRlbmRzIFJlYWRhYmxlIHtcblx0Y29uc3RydWN0b3Ioc29ja2V0LCBoaWdoV2F0ZXJNYXJrKSB7XG5cdFx0c3VwZXIoe1xuXHRcdFx0aGlnaFdhdGVyTWFyayxcblx0XHRcdGF1dG9EZXN0cm95OiBmYWxzZVxuXHRcdH0pO1xuXG5cdFx0dGhpcy5zdGF0dXNDb2RlID0gbnVsbDtcblx0XHR0aGlzLnN0YXR1c01lc3NhZ2UgPSAnJztcblx0XHR0aGlzLmh0dHBWZXJzaW9uID0gJzIuMCc7XG5cdFx0dGhpcy5odHRwVmVyc2lvbk1ham9yID0gMjtcblx0XHR0aGlzLmh0dHBWZXJzaW9uTWlub3IgPSAwO1xuXHRcdHRoaXMuaGVhZGVycyA9IHt9O1xuXHRcdHRoaXMudHJhaWxlcnMgPSB7fTtcblx0XHR0aGlzLnJlcSA9IG51bGw7XG5cblx0XHR0aGlzLmFib3J0ZWQgPSBmYWxzZTtcblx0XHR0aGlzLmNvbXBsZXRlID0gZmFsc2U7XG5cdFx0dGhpcy51cGdyYWRlID0gbnVsbDtcblxuXHRcdHRoaXMucmF3SGVhZGVycyA9IFtdO1xuXHRcdHRoaXMucmF3VHJhaWxlcnMgPSBbXTtcblxuXHRcdHRoaXMuc29ja2V0ID0gc29ja2V0O1xuXHRcdHRoaXMuY29ubmVjdGlvbiA9IHNvY2tldDtcblxuXHRcdHRoaXMuX2R1bXBlZCA9IGZhbHNlO1xuXHR9XG5cblx0X2Rlc3Ryb3koZXJyb3IpIHtcblx0XHR0aGlzLnJlcS5fcmVxdWVzdC5kZXN0cm95KGVycm9yKTtcblx0fVxuXG5cdHNldFRpbWVvdXQobXMsIGNhbGxiYWNrKSB7XG5cdFx0dGhpcy5yZXEuc2V0VGltZW91dChtcywgY2FsbGJhY2spO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0X2R1bXAoKSB7XG5cdFx0aWYgKCF0aGlzLl9kdW1wZWQpIHtcblx0XHRcdHRoaXMuX2R1bXBlZCA9IHRydWU7XG5cblx0XHRcdHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCdkYXRhJyk7XG5cdFx0XHR0aGlzLnJlc3VtZSgpO1xuXHRcdH1cblx0fVxuXG5cdF9yZWFkKCkge1xuXHRcdGlmICh0aGlzLnJlcSkge1xuXHRcdFx0dGhpcy5yZXEuX3JlcXVlc3QucmVzdW1lKCk7XG5cdFx0fVxuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gSW5jb21pbmdNZXNzYWdlO1xuIl0sIm5hbWVzIjpbIlJlYWRhYmxlIiwicmVxdWlyZSIsIkluY29taW5nTWVzc2FnZSIsImNvbnN0cnVjdG9yIiwic29ja2V0IiwiaGlnaFdhdGVyTWFyayIsImF1dG9EZXN0cm95Iiwic3RhdHVzQ29kZSIsInN0YXR1c01lc3NhZ2UiLCJodHRwVmVyc2lvbiIsImh0dHBWZXJzaW9uTWFqb3IiLCJodHRwVmVyc2lvbk1pbm9yIiwiaGVhZGVycyIsInRyYWlsZXJzIiwicmVxIiwiYWJvcnRlZCIsImNvbXBsZXRlIiwidXBncmFkZSIsInJhd0hlYWRlcnMiLCJyYXdUcmFpbGVycyIsImNvbm5lY3Rpb24iLCJfZHVtcGVkIiwiX2Rlc3Ryb3kiLCJlcnJvciIsIl9yZXF1ZXN0IiwiZGVzdHJveSIsInNldFRpbWVvdXQiLCJtcyIsImNhbGxiYWNrIiwiX2R1bXAiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJyZXN1bWUiLCJfcmVhZCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/http2-wrapper/source/incoming-message.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/http2-wrapper/source/index.js":
/*!****************************************************!*\
  !*** ./node_modules/http2-wrapper/source/index.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst http2 = __webpack_require__(/*! http2 */ \"http2\");\nconst agent = __webpack_require__(/*! ./agent */ \"(ssr)/./node_modules/http2-wrapper/source/agent.js\");\nconst ClientRequest = __webpack_require__(/*! ./client-request */ \"(ssr)/./node_modules/http2-wrapper/source/client-request.js\");\nconst IncomingMessage = __webpack_require__(/*! ./incoming-message */ \"(ssr)/./node_modules/http2-wrapper/source/incoming-message.js\");\nconst auto = __webpack_require__(/*! ./auto */ \"(ssr)/./node_modules/http2-wrapper/source/auto.js\");\nconst request = (url, options, callback)=>{\n    return new ClientRequest(url, options, callback);\n};\nconst get = (url, options, callback)=>{\n    // eslint-disable-next-line unicorn/prevent-abbreviations\n    const req = new ClientRequest(url, options, callback);\n    req.end();\n    return req;\n};\nmodule.exports = {\n    ...http2,\n    ClientRequest,\n    IncomingMessage,\n    ...agent,\n    request,\n    get,\n    auto\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaHR0cDItd3JhcHBlci9zb3VyY2UvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxNQUFNQSxRQUFRQyxtQkFBT0EsQ0FBQztBQUN0QixNQUFNQyxRQUFRRCxtQkFBT0EsQ0FBQztBQUN0QixNQUFNRSxnQkFBZ0JGLG1CQUFPQSxDQUFDO0FBQzlCLE1BQU1HLGtCQUFrQkgsbUJBQU9BLENBQUM7QUFDaEMsTUFBTUksT0FBT0osbUJBQU9BLENBQUM7QUFFckIsTUFBTUssVUFBVSxDQUFDQyxLQUFLQyxTQUFTQztJQUM5QixPQUFPLElBQUlOLGNBQWNJLEtBQUtDLFNBQVNDO0FBQ3hDO0FBRUEsTUFBTUMsTUFBTSxDQUFDSCxLQUFLQyxTQUFTQztJQUMxQix5REFBeUQ7SUFDekQsTUFBTUUsTUFBTSxJQUFJUixjQUFjSSxLQUFLQyxTQUFTQztJQUM1Q0UsSUFBSUMsR0FBRztJQUVQLE9BQU9EO0FBQ1I7QUFFQUUsT0FBT0MsT0FBTyxHQUFHO0lBQ2hCLEdBQUdkLEtBQUs7SUFDUkc7SUFDQUM7SUFDQSxHQUFHRixLQUFLO0lBQ1JJO0lBQ0FJO0lBQ0FMO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ub2NvZGUtbG1zLWJ1aWxkZXIvLi9ub2RlX21vZHVsZXMvaHR0cDItd3JhcHBlci9zb3VyY2UvaW5kZXguanM/MmNkMyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCBodHRwMiA9IHJlcXVpcmUoJ2h0dHAyJyk7XG5jb25zdCBhZ2VudCA9IHJlcXVpcmUoJy4vYWdlbnQnKTtcbmNvbnN0IENsaWVudFJlcXVlc3QgPSByZXF1aXJlKCcuL2NsaWVudC1yZXF1ZXN0Jyk7XG5jb25zdCBJbmNvbWluZ01lc3NhZ2UgPSByZXF1aXJlKCcuL2luY29taW5nLW1lc3NhZ2UnKTtcbmNvbnN0IGF1dG8gPSByZXF1aXJlKCcuL2F1dG8nKTtcblxuY29uc3QgcmVxdWVzdCA9ICh1cmwsIG9wdGlvbnMsIGNhbGxiYWNrKSA9PiB7XG5cdHJldHVybiBuZXcgQ2xpZW50UmVxdWVzdCh1cmwsIG9wdGlvbnMsIGNhbGxiYWNrKTtcbn07XG5cbmNvbnN0IGdldCA9ICh1cmwsIG9wdGlvbnMsIGNhbGxiYWNrKSA9PiB7XG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSB1bmljb3JuL3ByZXZlbnQtYWJicmV2aWF0aW9uc1xuXHRjb25zdCByZXEgPSBuZXcgQ2xpZW50UmVxdWVzdCh1cmwsIG9wdGlvbnMsIGNhbGxiYWNrKTtcblx0cmVxLmVuZCgpO1xuXG5cdHJldHVybiByZXE7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0Li4uaHR0cDIsXG5cdENsaWVudFJlcXVlc3QsXG5cdEluY29taW5nTWVzc2FnZSxcblx0Li4uYWdlbnQsXG5cdHJlcXVlc3QsXG5cdGdldCxcblx0YXV0b1xufTtcbiJdLCJuYW1lcyI6WyJodHRwMiIsInJlcXVpcmUiLCJhZ2VudCIsIkNsaWVudFJlcXVlc3QiLCJJbmNvbWluZ01lc3NhZ2UiLCJhdXRvIiwicmVxdWVzdCIsInVybCIsIm9wdGlvbnMiLCJjYWxsYmFjayIsImdldCIsInJlcSIsImVuZCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/http2-wrapper/source/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/http2-wrapper/source/utils/calculate-server-name.js":
/*!**************************************************************************!*\
  !*** ./node_modules/http2-wrapper/source/utils/calculate-server-name.js ***!
  \**************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst net = __webpack_require__(/*! net */ \"net\");\n/* istanbul ignore file: https://github.com/nodejs/node/blob/v13.0.1/lib/_http_agent.js */ module.exports = (options)=>{\n    let servername = options.host;\n    const hostHeader = options.headers && options.headers.host;\n    if (hostHeader) {\n        if (hostHeader.startsWith(\"[\")) {\n            const index = hostHeader.indexOf(\"]\");\n            if (index === -1) {\n                servername = hostHeader;\n            } else {\n                servername = hostHeader.slice(1, -1);\n            }\n        } else {\n            servername = hostHeader.split(\":\", 1)[0];\n        }\n    }\n    if (net.isIP(servername)) {\n        return \"\";\n    }\n    return servername;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaHR0cDItd3JhcHBlci9zb3VyY2UvdXRpbHMvY2FsY3VsYXRlLXNlcnZlci1uYW1lLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsTUFBTUEsTUFBTUMsbUJBQU9BLENBQUM7QUFDcEIsd0ZBQXdGLEdBRXhGQyxPQUFPQyxPQUFPLEdBQUdDLENBQUFBO0lBQ2hCLElBQUlDLGFBQWFELFFBQVFFLElBQUk7SUFDN0IsTUFBTUMsYUFBYUgsUUFBUUksT0FBTyxJQUFJSixRQUFRSSxPQUFPLENBQUNGLElBQUk7SUFFMUQsSUFBSUMsWUFBWTtRQUNmLElBQUlBLFdBQVdFLFVBQVUsQ0FBQyxNQUFNO1lBQy9CLE1BQU1DLFFBQVFILFdBQVdJLE9BQU8sQ0FBQztZQUNqQyxJQUFJRCxVQUFVLENBQUMsR0FBRztnQkFDakJMLGFBQWFFO1lBQ2QsT0FBTztnQkFDTkYsYUFBYUUsV0FBV0ssS0FBSyxDQUFDLEdBQUcsQ0FBQztZQUNuQztRQUNELE9BQU87WUFDTlAsYUFBYUUsV0FBV00sS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUU7UUFDekM7SUFDRDtJQUVBLElBQUliLElBQUljLElBQUksQ0FBQ1QsYUFBYTtRQUN6QixPQUFPO0lBQ1I7SUFFQSxPQUFPQTtBQUNSIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbm9jb2RlLWxtcy1idWlsZGVyLy4vbm9kZV9tb2R1bGVzL2h0dHAyLXdyYXBwZXIvc291cmNlL3V0aWxzL2NhbGN1bGF0ZS1zZXJ2ZXItbmFtZS5qcz9hMzBkIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbmNvbnN0IG5ldCA9IHJlcXVpcmUoJ25ldCcpO1xuLyogaXN0YW5idWwgaWdub3JlIGZpbGU6IGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvbm9kZS9ibG9iL3YxMy4wLjEvbGliL19odHRwX2FnZW50LmpzICovXG5cbm1vZHVsZS5leHBvcnRzID0gb3B0aW9ucyA9PiB7XG5cdGxldCBzZXJ2ZXJuYW1lID0gb3B0aW9ucy5ob3N0O1xuXHRjb25zdCBob3N0SGVhZGVyID0gb3B0aW9ucy5oZWFkZXJzICYmIG9wdGlvbnMuaGVhZGVycy5ob3N0O1xuXG5cdGlmIChob3N0SGVhZGVyKSB7XG5cdFx0aWYgKGhvc3RIZWFkZXIuc3RhcnRzV2l0aCgnWycpKSB7XG5cdFx0XHRjb25zdCBpbmRleCA9IGhvc3RIZWFkZXIuaW5kZXhPZignXScpO1xuXHRcdFx0aWYgKGluZGV4ID09PSAtMSkge1xuXHRcdFx0XHRzZXJ2ZXJuYW1lID0gaG9zdEhlYWRlcjtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHNlcnZlcm5hbWUgPSBob3N0SGVhZGVyLnNsaWNlKDEsIC0xKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0c2VydmVybmFtZSA9IGhvc3RIZWFkZXIuc3BsaXQoJzonLCAxKVswXTtcblx0XHR9XG5cdH1cblxuXHRpZiAobmV0LmlzSVAoc2VydmVybmFtZSkpIHtcblx0XHRyZXR1cm4gJyc7XG5cdH1cblxuXHRyZXR1cm4gc2VydmVybmFtZTtcbn07XG4iXSwibmFtZXMiOlsibmV0IiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJvcHRpb25zIiwic2VydmVybmFtZSIsImhvc3QiLCJob3N0SGVhZGVyIiwiaGVhZGVycyIsInN0YXJ0c1dpdGgiLCJpbmRleCIsImluZGV4T2YiLCJzbGljZSIsInNwbGl0IiwiaXNJUCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/http2-wrapper/source/utils/calculate-server-name.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/http2-wrapper/source/utils/errors.js":
/*!***********************************************************!*\
  !*** ./node_modules/http2-wrapper/source/utils/errors.js ***!
  \***********************************************************/
/***/ ((module) => {

eval("\n/* istanbul ignore file: https://github.com/nodejs/node/blob/master/lib/internal/errors.js */ const makeError = (Base, key, getMessage)=>{\n    module.exports[key] = class NodeError extends Base {\n        constructor(...args){\n            super(typeof getMessage === \"string\" ? getMessage : getMessage(args));\n            this.name = `${super.name} [${key}]`;\n            this.code = key;\n        }\n    };\n};\nmakeError(TypeError, \"ERR_INVALID_ARG_TYPE\", (args)=>{\n    const type = args[0].includes(\".\") ? \"property\" : \"argument\";\n    let valid = args[1];\n    const isManyTypes = Array.isArray(valid);\n    if (isManyTypes) {\n        valid = `${valid.slice(0, -1).join(\", \")} or ${valid.slice(-1)}`;\n    }\n    return `The \"${args[0]}\" ${type} must be ${isManyTypes ? \"one of\" : \"of\"} type ${valid}. Received ${typeof args[2]}`;\n});\nmakeError(TypeError, \"ERR_INVALID_PROTOCOL\", (args)=>{\n    return `Protocol \"${args[0]}\" not supported. Expected \"${args[1]}\"`;\n});\nmakeError(Error, \"ERR_HTTP_HEADERS_SENT\", (args)=>{\n    return `Cannot ${args[0]} headers after they are sent to the client`;\n});\nmakeError(TypeError, \"ERR_INVALID_HTTP_TOKEN\", (args)=>{\n    return `${args[0]} must be a valid HTTP token [${args[1]}]`;\n});\nmakeError(TypeError, \"ERR_HTTP_INVALID_HEADER_VALUE\", (args)=>{\n    return `Invalid value \"${args[0]} for header \"${args[1]}\"`;\n});\nmakeError(TypeError, \"ERR_INVALID_CHAR\", (args)=>{\n    return `Invalid character in ${args[0]} [${args[1]}]`;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaHR0cDItd3JhcHBlci9zb3VyY2UvdXRpbHMvZXJyb3JzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsMkZBQTJGLEdBRTNGLE1BQU1BLFlBQVksQ0FBQ0MsTUFBTUMsS0FBS0M7SUFDN0JDLE9BQU9DLE9BQU8sQ0FBQ0gsSUFBSSxHQUFHLE1BQU1JLGtCQUFrQkw7UUFDN0NNLFlBQVksR0FBR0MsSUFBSSxDQUFFO1lBQ3BCLEtBQUssQ0FBQyxPQUFPTCxlQUFlLFdBQVdBLGFBQWFBLFdBQVdLO1lBQy9ELElBQUksQ0FBQ0MsSUFBSSxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUNBLEtBQUssRUFBRSxFQUFFUCxJQUFJLENBQUMsQ0FBQztZQUNwQyxJQUFJLENBQUNRLElBQUksR0FBR1I7UUFDYjtJQUNEO0FBQ0Q7QUFFQUYsVUFBVVcsV0FBVyx3QkFBd0JILENBQUFBO0lBQzVDLE1BQU1JLE9BQU9KLElBQUksQ0FBQyxFQUFFLENBQUNLLFFBQVEsQ0FBQyxPQUFPLGFBQWE7SUFFbEQsSUFBSUMsUUFBUU4sSUFBSSxDQUFDLEVBQUU7SUFDbkIsTUFBTU8sY0FBY0MsTUFBTUMsT0FBTyxDQUFDSDtJQUVsQyxJQUFJQyxhQUFhO1FBQ2hCRCxRQUFRLENBQUMsRUFBRUEsTUFBTUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHQyxJQUFJLENBQUMsTUFBTSxJQUFJLEVBQUVMLE1BQU1JLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQztJQUNqRTtJQUVBLE9BQU8sQ0FBQyxLQUFLLEVBQUVWLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFSSxLQUFLLFNBQVMsRUFBRUcsY0FBYyxXQUFXLEtBQUssTUFBTSxFQUFFRCxNQUFNLFdBQVcsRUFBRSxPQUFPTixJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDckg7QUFFQVIsVUFBVVcsV0FBVyx3QkFBd0JILENBQUFBO0lBQzVDLE9BQU8sQ0FBQyxVQUFVLEVBQUVBLElBQUksQ0FBQyxFQUFFLENBQUMsMkJBQTJCLEVBQUVBLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3BFO0FBRUFSLFVBQVVvQixPQUFPLHlCQUF5QlosQ0FBQUE7SUFDekMsT0FBTyxDQUFDLE9BQU8sRUFBRUEsSUFBSSxDQUFDLEVBQUUsQ0FBQywwQ0FBMEMsQ0FBQztBQUNyRTtBQUVBUixVQUFVVyxXQUFXLDBCQUEwQkgsQ0FBQUE7SUFDOUMsT0FBTyxDQUFDLEVBQUVBLElBQUksQ0FBQyxFQUFFLENBQUMsNkJBQTZCLEVBQUVBLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQzVEO0FBRUFSLFVBQVVXLFdBQVcsaUNBQWlDSCxDQUFBQTtJQUNyRCxPQUFPLENBQUMsZUFBZSxFQUFFQSxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRUEsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDM0Q7QUFFQVIsVUFBVVcsV0FBVyxvQkFBb0JILENBQUFBO0lBQ3hDLE9BQU8sQ0FBQyxxQkFBcUIsRUFBRUEsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUVBLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3REIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbm9jb2RlLWxtcy1idWlsZGVyLy4vbm9kZV9tb2R1bGVzL2h0dHAyLXdyYXBwZXIvc291cmNlL3V0aWxzL2Vycm9ycy5qcz82YmM0Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbi8qIGlzdGFuYnVsIGlnbm9yZSBmaWxlOiBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvYmxvYi9tYXN0ZXIvbGliL2ludGVybmFsL2Vycm9ycy5qcyAqL1xuXG5jb25zdCBtYWtlRXJyb3IgPSAoQmFzZSwga2V5LCBnZXRNZXNzYWdlKSA9PiB7XG5cdG1vZHVsZS5leHBvcnRzW2tleV0gPSBjbGFzcyBOb2RlRXJyb3IgZXh0ZW5kcyBCYXNlIHtcblx0XHRjb25zdHJ1Y3RvciguLi5hcmdzKSB7XG5cdFx0XHRzdXBlcih0eXBlb2YgZ2V0TWVzc2FnZSA9PT0gJ3N0cmluZycgPyBnZXRNZXNzYWdlIDogZ2V0TWVzc2FnZShhcmdzKSk7XG5cdFx0XHR0aGlzLm5hbWUgPSBgJHtzdXBlci5uYW1lfSBbJHtrZXl9XWA7XG5cdFx0XHR0aGlzLmNvZGUgPSBrZXk7XG5cdFx0fVxuXHR9O1xufTtcblxubWFrZUVycm9yKFR5cGVFcnJvciwgJ0VSUl9JTlZBTElEX0FSR19UWVBFJywgYXJncyA9PiB7XG5cdGNvbnN0IHR5cGUgPSBhcmdzWzBdLmluY2x1ZGVzKCcuJykgPyAncHJvcGVydHknIDogJ2FyZ3VtZW50JztcblxuXHRsZXQgdmFsaWQgPSBhcmdzWzFdO1xuXHRjb25zdCBpc01hbnlUeXBlcyA9IEFycmF5LmlzQXJyYXkodmFsaWQpO1xuXG5cdGlmIChpc01hbnlUeXBlcykge1xuXHRcdHZhbGlkID0gYCR7dmFsaWQuc2xpY2UoMCwgLTEpLmpvaW4oJywgJyl9IG9yICR7dmFsaWQuc2xpY2UoLTEpfWA7XG5cdH1cblxuXHRyZXR1cm4gYFRoZSBcIiR7YXJnc1swXX1cIiAke3R5cGV9IG11c3QgYmUgJHtpc01hbnlUeXBlcyA/ICdvbmUgb2YnIDogJ29mJ30gdHlwZSAke3ZhbGlkfS4gUmVjZWl2ZWQgJHt0eXBlb2YgYXJnc1syXX1gO1xufSk7XG5cbm1ha2VFcnJvcihUeXBlRXJyb3IsICdFUlJfSU5WQUxJRF9QUk9UT0NPTCcsIGFyZ3MgPT4ge1xuXHRyZXR1cm4gYFByb3RvY29sIFwiJHthcmdzWzBdfVwiIG5vdCBzdXBwb3J0ZWQuIEV4cGVjdGVkIFwiJHthcmdzWzFdfVwiYDtcbn0pO1xuXG5tYWtlRXJyb3IoRXJyb3IsICdFUlJfSFRUUF9IRUFERVJTX1NFTlQnLCBhcmdzID0+IHtcblx0cmV0dXJuIGBDYW5ub3QgJHthcmdzWzBdfSBoZWFkZXJzIGFmdGVyIHRoZXkgYXJlIHNlbnQgdG8gdGhlIGNsaWVudGA7XG59KTtcblxubWFrZUVycm9yKFR5cGVFcnJvciwgJ0VSUl9JTlZBTElEX0hUVFBfVE9LRU4nLCBhcmdzID0+IHtcblx0cmV0dXJuIGAke2FyZ3NbMF19IG11c3QgYmUgYSB2YWxpZCBIVFRQIHRva2VuIFske2FyZ3NbMV19XWA7XG59KTtcblxubWFrZUVycm9yKFR5cGVFcnJvciwgJ0VSUl9IVFRQX0lOVkFMSURfSEVBREVSX1ZBTFVFJywgYXJncyA9PiB7XG5cdHJldHVybiBgSW52YWxpZCB2YWx1ZSBcIiR7YXJnc1swXX0gZm9yIGhlYWRlciBcIiR7YXJnc1sxXX1cImA7XG59KTtcblxubWFrZUVycm9yKFR5cGVFcnJvciwgJ0VSUl9JTlZBTElEX0NIQVInLCBhcmdzID0+IHtcblx0cmV0dXJuIGBJbnZhbGlkIGNoYXJhY3RlciBpbiAke2FyZ3NbMF19IFske2FyZ3NbMV19XWA7XG59KTtcbiJdLCJuYW1lcyI6WyJtYWtlRXJyb3IiLCJCYXNlIiwia2V5IiwiZ2V0TWVzc2FnZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJOb2RlRXJyb3IiLCJjb25zdHJ1Y3RvciIsImFyZ3MiLCJuYW1lIiwiY29kZSIsIlR5cGVFcnJvciIsInR5cGUiLCJpbmNsdWRlcyIsInZhbGlkIiwiaXNNYW55VHlwZXMiLCJBcnJheSIsImlzQXJyYXkiLCJzbGljZSIsImpvaW4iLCJFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/http2-wrapper/source/utils/errors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/http2-wrapper/source/utils/is-request-pseudo-header.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/http2-wrapper/source/utils/is-request-pseudo-header.js ***!
  \*****************************************************************************/
/***/ ((module) => {

eval("\nmodule.exports = (header)=>{\n    switch(header){\n        case \":method\":\n        case \":scheme\":\n        case \":authority\":\n        case \":path\":\n            return true;\n        default:\n            return false;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaHR0cDItd3JhcHBlci9zb3VyY2UvdXRpbHMvaXMtcmVxdWVzdC1wc2V1ZG8taGVhZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUFBLE9BQU9DLE9BQU8sR0FBR0MsQ0FBQUE7SUFDaEIsT0FBUUE7UUFDUCxLQUFLO1FBQ0wsS0FBSztRQUNMLEtBQUs7UUFDTCxLQUFLO1lBQ0osT0FBTztRQUNSO1lBQ0MsT0FBTztJQUNUO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ub2NvZGUtbG1zLWJ1aWxkZXIvLi9ub2RlX21vZHVsZXMvaHR0cDItd3JhcHBlci9zb3VyY2UvdXRpbHMvaXMtcmVxdWVzdC1wc2V1ZG8taGVhZGVyLmpzPzVkNjEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGhlYWRlciA9PiB7XG5cdHN3aXRjaCAoaGVhZGVyKSB7XG5cdFx0Y2FzZSAnOm1ldGhvZCc6XG5cdFx0Y2FzZSAnOnNjaGVtZSc6XG5cdFx0Y2FzZSAnOmF1dGhvcml0eSc6XG5cdFx0Y2FzZSAnOnBhdGgnOlxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0ZGVmYXVsdDpcblx0XHRcdHJldHVybiBmYWxzZTtcblx0fVxufTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiaGVhZGVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/http2-wrapper/source/utils/is-request-pseudo-header.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/http2-wrapper/source/utils/proxy-events.js":
/*!*****************************************************************!*\
  !*** ./node_modules/http2-wrapper/source/utils/proxy-events.js ***!
  \*****************************************************************/
/***/ ((module) => {

eval("\nmodule.exports = (from, to, events)=>{\n    for (const event of events){\n        from.on(event, (...args)=>to.emit(event, ...args));\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaHR0cDItd3JhcHBlci9zb3VyY2UvdXRpbHMvcHJveHktZXZlbnRzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUFBLE9BQU9DLE9BQU8sR0FBRyxDQUFDQyxNQUFNQyxJQUFJQztJQUMzQixLQUFLLE1BQU1DLFNBQVNELE9BQVE7UUFDM0JGLEtBQUtJLEVBQUUsQ0FBQ0QsT0FBTyxDQUFDLEdBQUdFLE9BQVNKLEdBQUdLLElBQUksQ0FBQ0gsVUFBVUU7SUFDL0M7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL25vY29kZS1sbXMtYnVpbGRlci8uL25vZGVfbW9kdWxlcy9odHRwMi13cmFwcGVyL3NvdXJjZS91dGlscy9wcm94eS1ldmVudHMuanM/MGE3OSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gKGZyb20sIHRvLCBldmVudHMpID0+IHtcblx0Zm9yIChjb25zdCBldmVudCBvZiBldmVudHMpIHtcblx0XHRmcm9tLm9uKGV2ZW50LCAoLi4uYXJncykgPT4gdG8uZW1pdChldmVudCwgLi4uYXJncykpO1xuXHR9XG59O1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJmcm9tIiwidG8iLCJldmVudHMiLCJldmVudCIsIm9uIiwiYXJncyIsImVtaXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/http2-wrapper/source/utils/proxy-events.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/http2-wrapper/source/utils/url-to-options.js":
/*!*******************************************************************!*\
  !*** ./node_modules/http2-wrapper/source/utils/url-to-options.js ***!
  \*******************************************************************/
/***/ ((module) => {

eval("\n/* istanbul ignore file: https://github.com/nodejs/node/blob/a91293d4d9ab403046ab5eb022332e4e3d249bd3/lib/internal/url.js#L1257 */ module.exports = (url)=>{\n    const options = {\n        protocol: url.protocol,\n        hostname: typeof url.hostname === \"string\" && url.hostname.startsWith(\"[\") ? url.hostname.slice(1, -1) : url.hostname,\n        host: url.host,\n        hash: url.hash,\n        search: url.search,\n        pathname: url.pathname,\n        href: url.href,\n        path: `${url.pathname || \"\"}${url.search || \"\"}`\n    };\n    if (typeof url.port === \"string\" && url.port.length !== 0) {\n        options.port = Number(url.port);\n    }\n    if (url.username || url.password) {\n        options.auth = `${url.username || \"\"}:${url.password || \"\"}`;\n    }\n    return options;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaHR0cDItd3JhcHBlci9zb3VyY2UvdXRpbHMvdXJsLXRvLW9wdGlvbnMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxnSUFBZ0ksR0FFaElBLE9BQU9DLE9BQU8sR0FBR0MsQ0FBQUE7SUFDaEIsTUFBTUMsVUFBVTtRQUNmQyxVQUFVRixJQUFJRSxRQUFRO1FBQ3RCQyxVQUFVLE9BQU9ILElBQUlHLFFBQVEsS0FBSyxZQUFZSCxJQUFJRyxRQUFRLENBQUNDLFVBQVUsQ0FBQyxPQUFPSixJQUFJRyxRQUFRLENBQUNFLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBS0wsSUFBSUcsUUFBUTtRQUNySEcsTUFBTU4sSUFBSU0sSUFBSTtRQUNkQyxNQUFNUCxJQUFJTyxJQUFJO1FBQ2RDLFFBQVFSLElBQUlRLE1BQU07UUFDbEJDLFVBQVVULElBQUlTLFFBQVE7UUFDdEJDLE1BQU1WLElBQUlVLElBQUk7UUFDZEMsTUFBTSxDQUFDLEVBQUVYLElBQUlTLFFBQVEsSUFBSSxHQUFHLEVBQUVULElBQUlRLE1BQU0sSUFBSSxHQUFHLENBQUM7SUFDakQ7SUFFQSxJQUFJLE9BQU9SLElBQUlZLElBQUksS0FBSyxZQUFZWixJQUFJWSxJQUFJLENBQUNDLE1BQU0sS0FBSyxHQUFHO1FBQzFEWixRQUFRVyxJQUFJLEdBQUdFLE9BQU9kLElBQUlZLElBQUk7SUFDL0I7SUFFQSxJQUFJWixJQUFJZSxRQUFRLElBQUlmLElBQUlnQixRQUFRLEVBQUU7UUFDakNmLFFBQVFnQixJQUFJLEdBQUcsQ0FBQyxFQUFFakIsSUFBSWUsUUFBUSxJQUFJLEdBQUcsQ0FBQyxFQUFFZixJQUFJZ0IsUUFBUSxJQUFJLEdBQUcsQ0FBQztJQUM3RDtJQUVBLE9BQU9mO0FBQ1IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ub2NvZGUtbG1zLWJ1aWxkZXIvLi9ub2RlX21vZHVsZXMvaHR0cDItd3JhcHBlci9zb3VyY2UvdXRpbHMvdXJsLXRvLW9wdGlvbnMuanM/NDUwNCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG4vKiBpc3RhbmJ1bCBpZ25vcmUgZmlsZTogaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9ub2RlL2Jsb2IvYTkxMjkzZDRkOWFiNDAzMDQ2YWI1ZWIwMjIzMzJlNGUzZDI0OWJkMy9saWIvaW50ZXJuYWwvdXJsLmpzI0wxMjU3ICovXG5cbm1vZHVsZS5leHBvcnRzID0gdXJsID0+IHtcblx0Y29uc3Qgb3B0aW9ucyA9IHtcblx0XHRwcm90b2NvbDogdXJsLnByb3RvY29sLFxuXHRcdGhvc3RuYW1lOiB0eXBlb2YgdXJsLmhvc3RuYW1lID09PSAnc3RyaW5nJyAmJiB1cmwuaG9zdG5hbWUuc3RhcnRzV2l0aCgnWycpID8gdXJsLmhvc3RuYW1lLnNsaWNlKDEsIC0xKSA6IHVybC5ob3N0bmFtZSxcblx0XHRob3N0OiB1cmwuaG9zdCxcblx0XHRoYXNoOiB1cmwuaGFzaCxcblx0XHRzZWFyY2g6IHVybC5zZWFyY2gsXG5cdFx0cGF0aG5hbWU6IHVybC5wYXRobmFtZSxcblx0XHRocmVmOiB1cmwuaHJlZixcblx0XHRwYXRoOiBgJHt1cmwucGF0aG5hbWUgfHwgJyd9JHt1cmwuc2VhcmNoIHx8ICcnfWBcblx0fTtcblxuXHRpZiAodHlwZW9mIHVybC5wb3J0ID09PSAnc3RyaW5nJyAmJiB1cmwucG9ydC5sZW5ndGggIT09IDApIHtcblx0XHRvcHRpb25zLnBvcnQgPSBOdW1iZXIodXJsLnBvcnQpO1xuXHR9XG5cblx0aWYgKHVybC51c2VybmFtZSB8fCB1cmwucGFzc3dvcmQpIHtcblx0XHRvcHRpb25zLmF1dGggPSBgJHt1cmwudXNlcm5hbWUgfHwgJyd9OiR7dXJsLnBhc3N3b3JkIHx8ICcnfWA7XG5cdH1cblxuXHRyZXR1cm4gb3B0aW9ucztcbn07XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInVybCIsIm9wdGlvbnMiLCJwcm90b2NvbCIsImhvc3RuYW1lIiwic3RhcnRzV2l0aCIsInNsaWNlIiwiaG9zdCIsImhhc2giLCJzZWFyY2giLCJwYXRobmFtZSIsImhyZWYiLCJwYXRoIiwicG9ydCIsImxlbmd0aCIsIk51bWJlciIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJhdXRoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/http2-wrapper/source/utils/url-to-options.js\n");

/***/ })

};
;