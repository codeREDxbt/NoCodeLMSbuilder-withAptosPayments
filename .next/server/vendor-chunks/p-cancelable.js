"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/p-cancelable";
exports.ids = ["vendor-chunks/p-cancelable"];
exports.modules = {

/***/ "(ssr)/./node_modules/p-cancelable/index.js":
/*!********************************************!*\
  !*** ./node_modules/p-cancelable/index.js ***!
  \********************************************/
/***/ ((module) => {

eval("\nclass CancelError extends Error {\n    constructor(reason){\n        super(reason || \"Promise was canceled\");\n        this.name = \"CancelError\";\n    }\n    get isCanceled() {\n        return true;\n    }\n}\nclass PCancelable {\n    static fn(userFn) {\n        return (...arguments_)=>{\n            return new PCancelable((resolve, reject, onCancel)=>{\n                arguments_.push(onCancel);\n                // eslint-disable-next-line promise/prefer-await-to-then\n                userFn(...arguments_).then(resolve, reject);\n            });\n        };\n    }\n    constructor(executor){\n        this._cancelHandlers = [];\n        this._isPending = true;\n        this._isCanceled = false;\n        this._rejectOnCancel = true;\n        this._promise = new Promise((resolve, reject)=>{\n            this._reject = reject;\n            const onResolve = (value)=>{\n                if (!this._isCanceled || !onCancel.shouldReject) {\n                    this._isPending = false;\n                    resolve(value);\n                }\n            };\n            const onReject = (error)=>{\n                this._isPending = false;\n                reject(error);\n            };\n            const onCancel = (handler)=>{\n                if (!this._isPending) {\n                    throw new Error(\"The `onCancel` handler was attached after the promise settled.\");\n                }\n                this._cancelHandlers.push(handler);\n            };\n            Object.defineProperties(onCancel, {\n                shouldReject: {\n                    get: ()=>this._rejectOnCancel,\n                    set: (boolean)=>{\n                        this._rejectOnCancel = boolean;\n                    }\n                }\n            });\n            return executor(onResolve, onReject, onCancel);\n        });\n    }\n    then(onFulfilled, onRejected) {\n        // eslint-disable-next-line promise/prefer-await-to-then\n        return this._promise.then(onFulfilled, onRejected);\n    }\n    catch(onRejected) {\n        return this._promise.catch(onRejected);\n    }\n    finally(onFinally) {\n        return this._promise.finally(onFinally);\n    }\n    cancel(reason) {\n        if (!this._isPending || this._isCanceled) {\n            return;\n        }\n        this._isCanceled = true;\n        if (this._cancelHandlers.length > 0) {\n            try {\n                for (const handler of this._cancelHandlers){\n                    handler();\n                }\n            } catch (error) {\n                this._reject(error);\n                return;\n            }\n        }\n        if (this._rejectOnCancel) {\n            this._reject(new CancelError(reason));\n        }\n    }\n    get isCanceled() {\n        return this._isCanceled;\n    }\n}\nObject.setPrototypeOf(PCancelable.prototype, Promise.prototype);\nmodule.exports = PCancelable;\nmodule.exports.CancelError = CancelError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcC1jYW5jZWxhYmxlL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsTUFBTUEsb0JBQW9CQztJQUN6QkMsWUFBWUMsTUFBTSxDQUFFO1FBQ25CLEtBQUssQ0FBQ0EsVUFBVTtRQUNoQixJQUFJLENBQUNDLElBQUksR0FBRztJQUNiO0lBRUEsSUFBSUMsYUFBYTtRQUNoQixPQUFPO0lBQ1I7QUFDRDtBQUVBLE1BQU1DO0lBQ0wsT0FBT0MsR0FBR0MsTUFBTSxFQUFFO1FBQ2pCLE9BQU8sQ0FBQyxHQUFHQztZQUNWLE9BQU8sSUFBSUgsWUFBWSxDQUFDSSxTQUFTQyxRQUFRQztnQkFDeENILFdBQVdJLElBQUksQ0FBQ0Q7Z0JBQ2hCLHdEQUF3RDtnQkFDeERKLFVBQVVDLFlBQVlLLElBQUksQ0FBQ0osU0FBU0M7WUFDckM7UUFDRDtJQUNEO0lBRUFULFlBQVlhLFFBQVEsQ0FBRTtRQUNyQixJQUFJLENBQUNDLGVBQWUsR0FBRyxFQUFFO1FBQ3pCLElBQUksQ0FBQ0MsVUFBVSxHQUFHO1FBQ2xCLElBQUksQ0FBQ0MsV0FBVyxHQUFHO1FBQ25CLElBQUksQ0FBQ0MsZUFBZSxHQUFHO1FBRXZCLElBQUksQ0FBQ0MsUUFBUSxHQUFHLElBQUlDLFFBQVEsQ0FBQ1gsU0FBU0M7WUFDckMsSUFBSSxDQUFDVyxPQUFPLEdBQUdYO1lBRWYsTUFBTVksWUFBWUMsQ0FBQUE7Z0JBQ2pCLElBQUksQ0FBQyxJQUFJLENBQUNOLFdBQVcsSUFBSSxDQUFDTixTQUFTYSxZQUFZLEVBQUU7b0JBQ2hELElBQUksQ0FBQ1IsVUFBVSxHQUFHO29CQUNsQlAsUUFBUWM7Z0JBQ1Q7WUFDRDtZQUVBLE1BQU1FLFdBQVdDLENBQUFBO2dCQUNoQixJQUFJLENBQUNWLFVBQVUsR0FBRztnQkFDbEJOLE9BQU9nQjtZQUNSO1lBRUEsTUFBTWYsV0FBV2dCLENBQUFBO2dCQUNoQixJQUFJLENBQUMsSUFBSSxDQUFDWCxVQUFVLEVBQUU7b0JBQ3JCLE1BQU0sSUFBSWhCLE1BQU07Z0JBQ2pCO2dCQUVBLElBQUksQ0FBQ2UsZUFBZSxDQUFDSCxJQUFJLENBQUNlO1lBQzNCO1lBRUFDLE9BQU9DLGdCQUFnQixDQUFDbEIsVUFBVTtnQkFDakNhLGNBQWM7b0JBQ2JNLEtBQUssSUFBTSxJQUFJLENBQUNaLGVBQWU7b0JBQy9CYSxLQUFLQyxDQUFBQTt3QkFDSixJQUFJLENBQUNkLGVBQWUsR0FBR2M7b0JBQ3hCO2dCQUNEO1lBQ0Q7WUFFQSxPQUFPbEIsU0FBU1EsV0FBV0csVUFBVWQ7UUFDdEM7SUFDRDtJQUVBRSxLQUFLb0IsV0FBVyxFQUFFQyxVQUFVLEVBQUU7UUFDN0Isd0RBQXdEO1FBQ3hELE9BQU8sSUFBSSxDQUFDZixRQUFRLENBQUNOLElBQUksQ0FBQ29CLGFBQWFDO0lBQ3hDO0lBRUFDLE1BQU1ELFVBQVUsRUFBRTtRQUNqQixPQUFPLElBQUksQ0FBQ2YsUUFBUSxDQUFDZ0IsS0FBSyxDQUFDRDtJQUM1QjtJQUVBRSxRQUFRQyxTQUFTLEVBQUU7UUFDbEIsT0FBTyxJQUFJLENBQUNsQixRQUFRLENBQUNpQixPQUFPLENBQUNDO0lBQzlCO0lBRUFDLE9BQU9wQyxNQUFNLEVBQUU7UUFDZCxJQUFJLENBQUMsSUFBSSxDQUFDYyxVQUFVLElBQUksSUFBSSxDQUFDQyxXQUFXLEVBQUU7WUFDekM7UUFDRDtRQUVBLElBQUksQ0FBQ0EsV0FBVyxHQUFHO1FBRW5CLElBQUksSUFBSSxDQUFDRixlQUFlLENBQUN3QixNQUFNLEdBQUcsR0FBRztZQUNwQyxJQUFJO2dCQUNILEtBQUssTUFBTVosV0FBVyxJQUFJLENBQUNaLGVBQWUsQ0FBRTtvQkFDM0NZO2dCQUNEO1lBQ0QsRUFBRSxPQUFPRCxPQUFPO2dCQUNmLElBQUksQ0FBQ0wsT0FBTyxDQUFDSztnQkFDYjtZQUNEO1FBQ0Q7UUFFQSxJQUFJLElBQUksQ0FBQ1IsZUFBZSxFQUFFO1lBQ3pCLElBQUksQ0FBQ0csT0FBTyxDQUFDLElBQUl0QixZQUFZRztRQUM5QjtJQUNEO0lBRUEsSUFBSUUsYUFBYTtRQUNoQixPQUFPLElBQUksQ0FBQ2EsV0FBVztJQUN4QjtBQUNEO0FBRUFXLE9BQU9ZLGNBQWMsQ0FBQ25DLFlBQVlvQyxTQUFTLEVBQUVyQixRQUFRcUIsU0FBUztBQUU5REMsT0FBT0MsT0FBTyxHQUFHdEM7QUFDakJxQywwQkFBMEIsR0FBRzNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbm9jb2RlLWxtcy1idWlsZGVyLy4vbm9kZV9tb2R1bGVzL3AtY2FuY2VsYWJsZS9pbmRleC5qcz8zMTkyIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY2xhc3MgQ2FuY2VsRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG5cdGNvbnN0cnVjdG9yKHJlYXNvbikge1xuXHRcdHN1cGVyKHJlYXNvbiB8fCAnUHJvbWlzZSB3YXMgY2FuY2VsZWQnKTtcblx0XHR0aGlzLm5hbWUgPSAnQ2FuY2VsRXJyb3InO1xuXHR9XG5cblx0Z2V0IGlzQ2FuY2VsZWQoKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cbn1cblxuY2xhc3MgUENhbmNlbGFibGUge1xuXHRzdGF0aWMgZm4odXNlckZuKSB7XG5cdFx0cmV0dXJuICguLi5hcmd1bWVudHNfKSA9PiB7XG5cdFx0XHRyZXR1cm4gbmV3IFBDYW5jZWxhYmxlKChyZXNvbHZlLCByZWplY3QsIG9uQ2FuY2VsKSA9PiB7XG5cdFx0XHRcdGFyZ3VtZW50c18ucHVzaChvbkNhbmNlbCk7XG5cdFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcm9taXNlL3ByZWZlci1hd2FpdC10by10aGVuXG5cdFx0XHRcdHVzZXJGbiguLi5hcmd1bWVudHNfKS50aGVuKHJlc29sdmUsIHJlamVjdCk7XG5cdFx0XHR9KTtcblx0XHR9O1xuXHR9XG5cblx0Y29uc3RydWN0b3IoZXhlY3V0b3IpIHtcblx0XHR0aGlzLl9jYW5jZWxIYW5kbGVycyA9IFtdO1xuXHRcdHRoaXMuX2lzUGVuZGluZyA9IHRydWU7XG5cdFx0dGhpcy5faXNDYW5jZWxlZCA9IGZhbHNlO1xuXHRcdHRoaXMuX3JlamVjdE9uQ2FuY2VsID0gdHJ1ZTtcblxuXHRcdHRoaXMuX3Byb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0XHR0aGlzLl9yZWplY3QgPSByZWplY3Q7XG5cblx0XHRcdGNvbnN0IG9uUmVzb2x2ZSA9IHZhbHVlID0+IHtcblx0XHRcdFx0aWYgKCF0aGlzLl9pc0NhbmNlbGVkIHx8ICFvbkNhbmNlbC5zaG91bGRSZWplY3QpIHtcblx0XHRcdFx0XHR0aGlzLl9pc1BlbmRpbmcgPSBmYWxzZTtcblx0XHRcdFx0XHRyZXNvbHZlKHZhbHVlKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdFx0Y29uc3Qgb25SZWplY3QgPSBlcnJvciA9PiB7XG5cdFx0XHRcdHRoaXMuX2lzUGVuZGluZyA9IGZhbHNlO1xuXHRcdFx0XHRyZWplY3QoZXJyb3IpO1xuXHRcdFx0fTtcblxuXHRcdFx0Y29uc3Qgb25DYW5jZWwgPSBoYW5kbGVyID0+IHtcblx0XHRcdFx0aWYgKCF0aGlzLl9pc1BlbmRpbmcpIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ1RoZSBgb25DYW5jZWxgIGhhbmRsZXIgd2FzIGF0dGFjaGVkIGFmdGVyIHRoZSBwcm9taXNlIHNldHRsZWQuJyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0aGlzLl9jYW5jZWxIYW5kbGVycy5wdXNoKGhhbmRsZXIpO1xuXHRcdFx0fTtcblxuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnRpZXMob25DYW5jZWwsIHtcblx0XHRcdFx0c2hvdWxkUmVqZWN0OiB7XG5cdFx0XHRcdFx0Z2V0OiAoKSA9PiB0aGlzLl9yZWplY3RPbkNhbmNlbCxcblx0XHRcdFx0XHRzZXQ6IGJvb2xlYW4gPT4ge1xuXHRcdFx0XHRcdFx0dGhpcy5fcmVqZWN0T25DYW5jZWwgPSBib29sZWFuO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdHJldHVybiBleGVjdXRvcihvblJlc29sdmUsIG9uUmVqZWN0LCBvbkNhbmNlbCk7XG5cdFx0fSk7XG5cdH1cblxuXHR0aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7XG5cdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByb21pc2UvcHJlZmVyLWF3YWl0LXRvLXRoZW5cblx0XHRyZXR1cm4gdGhpcy5fcHJvbWlzZS50aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKTtcblx0fVxuXG5cdGNhdGNoKG9uUmVqZWN0ZWQpIHtcblx0XHRyZXR1cm4gdGhpcy5fcHJvbWlzZS5jYXRjaChvblJlamVjdGVkKTtcblx0fVxuXG5cdGZpbmFsbHkob25GaW5hbGx5KSB7XG5cdFx0cmV0dXJuIHRoaXMuX3Byb21pc2UuZmluYWxseShvbkZpbmFsbHkpO1xuXHR9XG5cblx0Y2FuY2VsKHJlYXNvbikge1xuXHRcdGlmICghdGhpcy5faXNQZW5kaW5nIHx8IHRoaXMuX2lzQ2FuY2VsZWQpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR0aGlzLl9pc0NhbmNlbGVkID0gdHJ1ZTtcblxuXHRcdGlmICh0aGlzLl9jYW5jZWxIYW5kbGVycy5sZW5ndGggPiAwKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRmb3IgKGNvbnN0IGhhbmRsZXIgb2YgdGhpcy5fY2FuY2VsSGFuZGxlcnMpIHtcblx0XHRcdFx0XHRoYW5kbGVyKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHRcdHRoaXMuX3JlamVjdChlcnJvcik7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAodGhpcy5fcmVqZWN0T25DYW5jZWwpIHtcblx0XHRcdHRoaXMuX3JlamVjdChuZXcgQ2FuY2VsRXJyb3IocmVhc29uKSk7XG5cdFx0fVxuXHR9XG5cblx0Z2V0IGlzQ2FuY2VsZWQoKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2lzQ2FuY2VsZWQ7XG5cdH1cbn1cblxuT2JqZWN0LnNldFByb3RvdHlwZU9mKFBDYW5jZWxhYmxlLnByb3RvdHlwZSwgUHJvbWlzZS5wcm90b3R5cGUpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBDYW5jZWxhYmxlO1xubW9kdWxlLmV4cG9ydHMuQ2FuY2VsRXJyb3IgPSBDYW5jZWxFcnJvcjtcbiJdLCJuYW1lcyI6WyJDYW5jZWxFcnJvciIsIkVycm9yIiwiY29uc3RydWN0b3IiLCJyZWFzb24iLCJuYW1lIiwiaXNDYW5jZWxlZCIsIlBDYW5jZWxhYmxlIiwiZm4iLCJ1c2VyRm4iLCJhcmd1bWVudHNfIiwicmVzb2x2ZSIsInJlamVjdCIsIm9uQ2FuY2VsIiwicHVzaCIsInRoZW4iLCJleGVjdXRvciIsIl9jYW5jZWxIYW5kbGVycyIsIl9pc1BlbmRpbmciLCJfaXNDYW5jZWxlZCIsIl9yZWplY3RPbkNhbmNlbCIsIl9wcm9taXNlIiwiUHJvbWlzZSIsIl9yZWplY3QiLCJvblJlc29sdmUiLCJ2YWx1ZSIsInNob3VsZFJlamVjdCIsIm9uUmVqZWN0IiwiZXJyb3IiLCJoYW5kbGVyIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydGllcyIsImdldCIsInNldCIsImJvb2xlYW4iLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJjYXRjaCIsImZpbmFsbHkiLCJvbkZpbmFsbHkiLCJjYW5jZWwiLCJsZW5ndGgiLCJzZXRQcm90b3R5cGVPZiIsInByb3RvdHlwZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/p-cancelable/index.js\n");

/***/ })

};
;