"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/keyv";
exports.ids = ["vendor-chunks/keyv"];
exports.modules = {

/***/ "(ssr)/./node_modules/keyv/src/index.js":
/*!****************************************!*\
  !*** ./node_modules/keyv/src/index.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\nconst JSONB = __webpack_require__(/*! json-buffer */ \"(ssr)/./node_modules/json-buffer/index.js\");\nconst loadStore = (options)=>{\n    const adapters = {\n        redis: \"@keyv/redis\",\n        rediss: \"@keyv/redis\",\n        mongodb: \"@keyv/mongo\",\n        mongo: \"@keyv/mongo\",\n        sqlite: \"@keyv/sqlite\",\n        postgresql: \"@keyv/postgres\",\n        postgres: \"@keyv/postgres\",\n        mysql: \"@keyv/mysql\",\n        etcd: \"@keyv/etcd\",\n        offline: \"@keyv/offline\",\n        tiered: \"@keyv/tiered\"\n    };\n    if (options.adapter || options.uri) {\n        const adapter = options.adapter || /^[^:+]*/.exec(options.uri)[0];\n        return new (__webpack_require__(\"(ssr)/./node_modules/keyv/src sync recursive\")(adapters[adapter]))(options);\n    }\n    return new Map();\n};\nconst iterableAdapters = [\n    \"sqlite\",\n    \"postgres\",\n    \"mysql\",\n    \"mongo\",\n    \"redis\",\n    \"tiered\"\n];\nclass Keyv extends EventEmitter {\n    constructor(uri, { emitErrors = true, ...options } = {}){\n        super();\n        this.opts = {\n            namespace: \"keyv\",\n            serialize: JSONB.stringify,\n            deserialize: JSONB.parse,\n            ...typeof uri === \"string\" ? {\n                uri\n            } : uri,\n            ...options\n        };\n        if (!this.opts.store) {\n            const adapterOptions = {\n                ...this.opts\n            };\n            this.opts.store = loadStore(adapterOptions);\n        }\n        if (this.opts.compression) {\n            const compression = this.opts.compression;\n            this.opts.serialize = compression.serialize.bind(compression);\n            this.opts.deserialize = compression.deserialize.bind(compression);\n        }\n        if (typeof this.opts.store.on === \"function\" && emitErrors) {\n            this.opts.store.on(\"error\", (error)=>this.emit(\"error\", error));\n        }\n        this.opts.store.namespace = this.opts.namespace;\n        const generateIterator = (iterator)=>async function*() {\n                for await (const [key, raw] of typeof iterator === \"function\" ? iterator(this.opts.store.namespace) : iterator){\n                    const data = await this.opts.deserialize(raw);\n                    if (this.opts.store.namespace && !key.includes(this.opts.store.namespace)) {\n                        continue;\n                    }\n                    if (typeof data.expires === \"number\" && Date.now() > data.expires) {\n                        this.delete(key);\n                        continue;\n                    }\n                    yield [\n                        this._getKeyUnprefix(key),\n                        data.value\n                    ];\n                }\n            };\n        // Attach iterators\n        if (typeof this.opts.store[Symbol.iterator] === \"function\" && this.opts.store instanceof Map) {\n            this.iterator = generateIterator(this.opts.store);\n        } else if (typeof this.opts.store.iterator === \"function\" && this.opts.store.opts && this._checkIterableAdaptar()) {\n            this.iterator = generateIterator(this.opts.store.iterator.bind(this.opts.store));\n        }\n    }\n    _checkIterableAdaptar() {\n        return iterableAdapters.includes(this.opts.store.opts.dialect) || iterableAdapters.findIndex((element)=>this.opts.store.opts.url.includes(element)) >= 0;\n    }\n    _getKeyPrefix(key) {\n        return `${this.opts.namespace}:${key}`;\n    }\n    _getKeyPrefixArray(keys) {\n        return keys.map((key)=>`${this.opts.namespace}:${key}`);\n    }\n    _getKeyUnprefix(key) {\n        return key.split(\":\").splice(1).join(\":\");\n    }\n    get(key, options) {\n        const { store } = this.opts;\n        const isArray = Array.isArray(key);\n        const keyPrefixed = isArray ? this._getKeyPrefixArray(key) : this._getKeyPrefix(key);\n        if (isArray && store.getMany === undefined) {\n            const promises = [];\n            for (const key of keyPrefixed){\n                promises.push(Promise.resolve().then(()=>store.get(key)).then((data)=>typeof data === \"string\" ? this.opts.deserialize(data) : this.opts.compression ? this.opts.deserialize(data) : data).then((data)=>{\n                    if (data === undefined || data === null) {\n                        return undefined;\n                    }\n                    if (typeof data.expires === \"number\" && Date.now() > data.expires) {\n                        return this.delete(key).then(()=>undefined);\n                    }\n                    return options && options.raw ? data : data.value;\n                }));\n            }\n            return Promise.allSettled(promises).then((values)=>{\n                const data = [];\n                for (const value of values){\n                    data.push(value.value);\n                }\n                return data;\n            });\n        }\n        return Promise.resolve().then(()=>isArray ? store.getMany(keyPrefixed) : store.get(keyPrefixed)).then((data)=>typeof data === \"string\" ? this.opts.deserialize(data) : this.opts.compression ? this.opts.deserialize(data) : data).then((data)=>{\n            if (data === undefined || data === null) {\n                return undefined;\n            }\n            if (isArray) {\n                return data.map((row, index)=>{\n                    if (typeof row === \"string\") {\n                        row = this.opts.deserialize(row);\n                    }\n                    if (row === undefined || row === null) {\n                        return undefined;\n                    }\n                    if (typeof row.expires === \"number\" && Date.now() > row.expires) {\n                        this.delete(key[index]).then(()=>undefined);\n                        return undefined;\n                    }\n                    return options && options.raw ? row : row.value;\n                });\n            }\n            if (typeof data.expires === \"number\" && Date.now() > data.expires) {\n                return this.delete(key).then(()=>undefined);\n            }\n            return options && options.raw ? data : data.value;\n        });\n    }\n    set(key, value, ttl) {\n        const keyPrefixed = this._getKeyPrefix(key);\n        if (typeof ttl === \"undefined\") {\n            ttl = this.opts.ttl;\n        }\n        if (ttl === 0) {\n            ttl = undefined;\n        }\n        const { store } = this.opts;\n        return Promise.resolve().then(()=>{\n            const expires = typeof ttl === \"number\" ? Date.now() + ttl : null;\n            if (typeof value === \"symbol\") {\n                this.emit(\"error\", \"symbol cannot be serialized\");\n            }\n            value = {\n                value,\n                expires\n            };\n            return this.opts.serialize(value);\n        }).then((value)=>store.set(keyPrefixed, value, ttl)).then(()=>true);\n    }\n    delete(key) {\n        const { store } = this.opts;\n        if (Array.isArray(key)) {\n            const keyPrefixed = this._getKeyPrefixArray(key);\n            if (store.deleteMany === undefined) {\n                const promises = [];\n                for (const key of keyPrefixed){\n                    promises.push(store.delete(key));\n                }\n                return Promise.allSettled(promises).then((values)=>values.every((x)=>x.value === true));\n            }\n            return Promise.resolve().then(()=>store.deleteMany(keyPrefixed));\n        }\n        const keyPrefixed = this._getKeyPrefix(key);\n        return Promise.resolve().then(()=>store.delete(keyPrefixed));\n    }\n    clear() {\n        const { store } = this.opts;\n        return Promise.resolve().then(()=>store.clear());\n    }\n    has(key) {\n        const keyPrefixed = this._getKeyPrefix(key);\n        const { store } = this.opts;\n        return Promise.resolve().then(async ()=>{\n            if (typeof store.has === \"function\") {\n                return store.has(keyPrefixed);\n            }\n            const value = await store.get(keyPrefixed);\n            return value !== undefined;\n        });\n    }\n    disconnect() {\n        const { store } = this.opts;\n        if (typeof store.disconnect === \"function\") {\n            return store.disconnect();\n        }\n    }\n}\nmodule.exports = Keyv;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/keyv/src/index.js\n");

/***/ })

};
;